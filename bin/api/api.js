"use strict";
/* tslint:disable */
/**
 * MasterData API -
 * <p>MasterData API is the API used by the RVD web frontend.</p> <h2>Authentication</h2> <p>All service requests to the API are authenticated using JWT tokens. To aquire such a token, the user must request either a new token (/auth/token) or refresh an existing one (/auth/refresh). <br/><img src=\"images/authentication.png\" alt=\"authentication\" />
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'https://masterdata.test.continental-rvd.de/v1';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var ObjectSerializer = /** @class */ (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    };
    return ObjectSerializer;
}());
var AccessTokenResponse = /** @class */ (function () {
    function AccessTokenResponse() {
    }
    AccessTokenResponse.getAttributeTypeMap = function () {
        return AccessTokenResponse.attributeTypeMap;
    };
    AccessTokenResponse.discriminator = undefined;
    AccessTokenResponse.attributeTypeMap = [
        {
            "name": "accessToken",
            "baseName": "access_token",
            "type": "string"
        },
        {
            "name": "refreshToken",
            "baseName": "refresh_token",
            "type": "string"
        },
        {
            "name": "expiresIn",
            "baseName": "expires_in",
            "type": "number"
        },
        {
            "name": "refreshExpiresIn",
            "baseName": "refresh_expires_in",
            "type": "number"
        },
        {
            "name": "expires",
            "baseName": "expires",
            "type": "number"
        },
        {
            "name": "refreshExpires",
            "baseName": "refresh_expires",
            "type": "number"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "passwordNeedsChange",
            "baseName": "password_needs_change",
            "type": "boolean"
        }
    ];
    return AccessTokenResponse;
}());
exports.AccessTokenResponse = AccessTokenResponse;
var Account = /** @class */ (function () {
    function Account() {
    }
    Account.getAttributeTypeMap = function () {
        return Account.attributeTypeMap;
    };
    Account.discriminator = undefined;
    Account.attributeTypeMap = [
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        }
    ];
    return Account;
}());
exports.Account = Account;
var AccountDetail = /** @class */ (function () {
    function AccountDetail() {
    }
    AccountDetail.getAttributeTypeMap = function () {
        return AccountDetail.attributeTypeMap;
    };
    AccountDetail.discriminator = undefined;
    AccountDetail.attributeTypeMap = [
        {
            "name": "accountId",
            "baseName": "account_id",
            "type": "string"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contact_address",
            "type": "string"
        },
        {
            "name": "contactPhone",
            "baseName": "contact_phone",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contact_email",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "company_name",
            "type": "string"
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "string"
        },
        {
            "name": "primaryAddress",
            "baseName": "primary_address",
            "type": "string"
        },
        {
            "name": "billingInformation",
            "baseName": "billing_information",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        }
    ];
    return AccountDetail;
}());
exports.AccountDetail = AccountDetail;
var AccountDevicesCount = /** @class */ (function () {
    function AccountDevicesCount() {
    }
    AccountDevicesCount.getAttributeTypeMap = function () {
        return AccountDevicesCount.attributeTypeMap;
    };
    AccountDevicesCount.discriminator = undefined;
    AccountDevicesCount.attributeTypeMap = [
        {
            "name": "totalDevices",
            "baseName": "total_devices",
            "type": "number"
        },
        {
            "name": "deviceTypeDevices",
            "baseName": "device_type_devices",
            "type": "{ [key: string]: number; }"
        }
    ];
    return AccountDevicesCount;
}());
exports.AccountDevicesCount = AccountDevicesCount;
var AccountLicenseItem = /** @class */ (function () {
    function AccountLicenseItem() {
    }
    AccountLicenseItem.getAttributeTypeMap = function () {
        return AccountLicenseItem.attributeTypeMap;
    };
    AccountLicenseItem.discriminator = undefined;
    AccountLicenseItem.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "startTimestamp",
            "baseName": "start_timestamp",
            "type": "Date"
        },
        {
            "name": "endTimestamp",
            "baseName": "end_timestamp",
            "type": "Date"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "string"
        },
        {
            "name": "applicationDescription",
            "baseName": "application_description",
            "type": "string"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        },
        {
            "name": "licensePolicyDescription",
            "baseName": "license_policy_description",
            "type": "string"
        },
        {
            "name": "licenseActiveToken",
            "baseName": "license_active_token",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AccountLicenseItem.StatusEnum"
        }
    ];
    return AccountLicenseItem;
}());
exports.AccountLicenseItem = AccountLicenseItem;
(function (AccountLicenseItem) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Valid"] = 'valid'] = "Valid";
        StatusEnum[StatusEnum["Expired"] = 'expired'] = "Expired";
        StatusEnum[StatusEnum["Pending"] = 'pending'] = "Pending";
        StatusEnum[StatusEnum["ExpiresSoon"] = 'valid_expiring_soon'] = "ExpiresSoon";
    })(StatusEnum = AccountLicenseItem.StatusEnum || (AccountLicenseItem.StatusEnum = {}));
})(AccountLicenseItem = exports.AccountLicenseItem || (exports.AccountLicenseItem = {}));
exports.AccountLicenseItem = AccountLicenseItem;
var AccountListItem = /** @class */ (function () {
    function AccountListItem() {
    }
    AccountListItem.getAttributeTypeMap = function () {
        return AccountListItem.attributeTypeMap;
    };
    AccountListItem.discriminator = undefined;
    AccountListItem.attributeTypeMap = [
        {
            "name": "accountId",
            "baseName": "account_id",
            "type": "string"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contact_address",
            "type": "string"
        },
        {
            "name": "contactPhone",
            "baseName": "contact_phone",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "company_name",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        }
    ];
    return AccountListItem;
}());
exports.AccountListItem = AccountListItem;
var AccountUserDetail = /** @class */ (function () {
    function AccountUserDetail() {
    }
    AccountUserDetail.getAttributeTypeMap = function () {
        return AccountUserDetail.attributeTypeMap;
    };
    AccountUserDetail.discriminator = undefined;
    AccountUserDetail.attributeTypeMap = [
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>"
        },
        {
            "name": "street",
            "baseName": "street",
            "type": "string"
        },
        {
            "name": "postalAddress",
            "baseName": "postal_address",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string"
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "string"
        },
        {
            "name": "organizationUnit",
            "baseName": "organization_unit",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "photo",
            "baseName": "photo",
            "type": "string"
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        }
    ];
    return AccountUserDetail;
}());
exports.AccountUserDetail = AccountUserDetail;
var AccountUserListItem = /** @class */ (function () {
    function AccountUserListItem() {
    }
    AccountUserListItem.getAttributeTypeMap = function () {
        return AccountUserListItem.attributeTypeMap;
    };
    AccountUserListItem.discriminator = undefined;
    AccountUserListItem.attributeTypeMap = [
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return AccountUserListItem;
}());
exports.AccountUserListItem = AccountUserListItem;
var Accounts = /** @class */ (function (_super) {
    __extends(Accounts, _super);
    function Accounts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Accounts.getAttributeTypeMap = function () {
    };
    Accounts.discriminator = undefined;
    Accounts.attributeTypeMap = [];
    return Accounts;
}(Array));
exports.Accounts = Accounts;
var Application = /** @class */ (function () {
    function Application() {
    }
    Application.getAttributeTypeMap = function () {
        return Application.attributeTypeMap;
    };
    Application.discriminator = undefined;
    Application.attributeTypeMap = [
        {
            "name": "transmissionSchedule",
            "baseName": "transmission_schedule",
            "type": "TransmissionSchedule"
        },
        {
            "name": "customerVdcEndpoint",
            "baseName": "customer_vdc_endpoint",
            "type": "CustomerVdcEndpoint"
        },
        {
            "name": "forwardTo",
            "baseName": "forward_to",
            "type": "Array<CustomerVdcEndpoint>"
        },
        {
            "name": "dataManagedBy",
            "baseName": "data_managed_by",
            "type": "Application.DataManagedByEnum"
        },
        {
            "name": "collectionMode",
            "baseName": "collection_mode",
            "type": "Application.CollectionModeEnum"
        },
        {
            "name": "parameterSchedule",
            "baseName": "parameter_schedule",
            "type": "ParameterSchedule"
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "Array<string>"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "iosAppBundleId",
            "baseName": "ios_app_bundle_id",
            "type": "string"
        },
        {
            "name": "storeDataInRvd",
            "baseName": "store_data_in_rvd",
            "type": "boolean"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        }
    ];
    return Application;
}());
exports.Application = Application;
(function (Application) {
    var DataManagedByEnum;
    (function (DataManagedByEnum) {
        DataManagedByEnum[DataManagedByEnum["RVD"] = 'RVD'] = "RVD";
        DataManagedByEnum[DataManagedByEnum["CUSTOMER"] = 'CUSTOMER'] = "CUSTOMER";
    })(DataManagedByEnum = Application.DataManagedByEnum || (Application.DataManagedByEnum = {}));
    var CollectionModeEnum;
    (function (CollectionModeEnum) {
        CollectionModeEnum[CollectionModeEnum["MANAGED"] = 'MANAGED'] = "MANAGED";
        CollectionModeEnum[CollectionModeEnum["DEVICECONTROLLED"] = 'DEVICE_CONTROLLED'] = "DEVICECONTROLLED";
    })(CollectionModeEnum = Application.CollectionModeEnum || (Application.CollectionModeEnum = {}));
})(Application = exports.Application || (exports.Application = {}));
exports.Application = Application;
var ApplicationId = /** @class */ (function () {
    function ApplicationId() {
    }
    ApplicationId.getAttributeTypeMap = function () {
        return ApplicationId.attributeTypeMap;
    };
    ApplicationId.discriminator = undefined;
    ApplicationId.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        }
    ];
    return ApplicationId;
}());
exports.ApplicationId = ApplicationId;
var ApplicationList = /** @class */ (function (_super) {
    __extends(ApplicationList, _super);
    function ApplicationList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApplicationList.getAttributeTypeMap = function () {
        return ApplicationList.attributeTypeMap;
    };
    ApplicationList.discriminator = undefined;
    ApplicationList.attributeTypeMap = [];
    return ApplicationList;
}(Array));
exports.ApplicationList = ApplicationList;
var ApplicationUuid = /** @class */ (function () {
    function ApplicationUuid() {
    }
    ApplicationUuid.getAttributeTypeMap = function () {
        return ApplicationUuid.attributeTypeMap;
    };
    ApplicationUuid.discriminator = undefined;
    ApplicationUuid.attributeTypeMap = [];
    return ApplicationUuid;
}());
exports.ApplicationUuid = ApplicationUuid;
var CountryCode = /** @class */ (function () {
    function CountryCode() {
    }
    CountryCode.getAttributeTypeMap = function () {
        return CountryCode.attributeTypeMap;
    };
    CountryCode.discriminator = undefined;
    CountryCode.attributeTypeMap = [
        {
            "name": "isoCode",
            "baseName": "iso_code",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return CountryCode;
}());
exports.CountryCode = CountryCode;
var CustomerVdcEndpoint = /** @class */ (function () {
    function CustomerVdcEndpoint() {
    }
    CustomerVdcEndpoint.getAttributeTypeMap = function () {
        return CustomerVdcEndpoint.attributeTypeMap;
    };
    CustomerVdcEndpoint.discriminator = undefined;
    CustomerVdcEndpoint.attributeTypeMap = [
        {
            "name": "customerVdcUrl",
            "baseName": "customer_vdc_url",
            "type": "string"
        }
    ];
    return CustomerVdcEndpoint;
}());
exports.CustomerVdcEndpoint = CustomerVdcEndpoint;
var Device = /** @class */ (function () {
    function Device() {
    }
    Device.getAttributeTypeMap = function () {
        return Device.attributeTypeMap;
    };
    Device.discriminator = undefined;
    Device.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "string"
        },
        {
            "name": "hardwareRevision",
            "baseName": "hardware_revision",
            "type": "string"
        },
        {
            "name": "encryptionKeyReference",
            "baseName": "encryption_key_reference",
            "type": "string"
        },
        {
            "name": "installedFirmware",
            "baseName": "installed_firmware",
            "type": "Array<FirmwareVersion>"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "purchaseOrder",
            "baseName": "purchase_order",
            "type": "string"
        },
        {
            "name": "batchId",
            "baseName": "batch_id",
            "type": "string"
        },
        {
            "name": "shipmentDate",
            "baseName": "shipment_date",
            "type": "Date"
        },
        {
            "name": "logLevel",
            "baseName": "log_level",
            "type": "string"
        },
        {
            "name": "logLevelPerComponent",
            "baseName": "log_level_per_component",
            "type": "any"
        }
    ];
    return Device;
}());
exports.Device = Device;
var DeviceJob = /** @class */ (function () {
    function DeviceJob() {
    }
    DeviceJob.getAttributeTypeMap = function () {
        return DeviceJob.attributeTypeMap;
    };
    DeviceJob.discriminator = undefined;
    DeviceJob.attributeTypeMap = [
        {
            "name": "uniqueSerialNumbers",
            "baseName": "unique_serial_numbers",
            "type": "Array<string>"
        },
        {
            "name": "actions",
            "baseName": "actions",
            "type": "Array<DeviceJobAction>"
        }
    ];
    return DeviceJob;
}());
exports.DeviceJob = DeviceJob;
var DeviceJobAction = /** @class */ (function () {
    function DeviceJobAction() {
    }
    DeviceJobAction.getAttributeTypeMap = function () {
        return DeviceJobAction.attributeTypeMap;
    };
    DeviceJobAction.discriminator = undefined;
    DeviceJobAction.attributeTypeMap = [
        {
            "name": "operation",
            "baseName": "operation",
            "type": "string"
        },
        {
            "name": "attributeName",
            "baseName": "attribute_name",
            "type": "string"
        },
        {
            "name": "attributeValue",
            "baseName": "attribute_value",
            "type": "string"
        }
    ];
    return DeviceJobAction;
}());
exports.DeviceJobAction = DeviceJobAction;
var DeviceSerialNumberList = /** @class */ (function (_super) {
    __extends(DeviceSerialNumberList, _super);
    function DeviceSerialNumberList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceSerialNumberList.getAttributeTypeMap = function () {
        return DeviceSerialNumberList.attributeTypeMap;
    };
    DeviceSerialNumberList.discriminator = undefined;
    DeviceSerialNumberList.attributeTypeMap = [];
    return DeviceSerialNumberList;
}(Array));
exports.DeviceSerialNumberList = DeviceSerialNumberList;
var DeviceSet = /** @class */ (function () {
    function DeviceSet() {
    }
    DeviceSet.getAttributeTypeMap = function () {
        return DeviceSet.attributeTypeMap;
    };
    DeviceSet.discriminator = undefined;
    DeviceSet.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "deviceSerials",
            "baseName": "device_serials",
            "type": "Array<string>"
        }
    ];
    return DeviceSet;
}());
exports.DeviceSet = DeviceSet;
var DeviceSetList = /** @class */ (function (_super) {
    __extends(DeviceSetList, _super);
    function DeviceSetList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceSetList.getAttributeTypeMap = function () {
        return DeviceSetList.attributeTypeMap;
    };
    DeviceSetList.discriminator = undefined;
    DeviceSetList.attributeTypeMap = [];
    return DeviceSetList;
}(Array));
exports.DeviceSetList = DeviceSetList;
var DeviceSetPatch = /** @class */ (function () {
    function DeviceSetPatch() {
    }
    DeviceSetPatch.getAttributeTypeMap = function () {
        return DeviceSetPatch.attributeTypeMap;
    };
    DeviceSetPatch.discriminator = undefined;
    DeviceSetPatch.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "addDeviceSerials",
            "baseName": "add_device_serials",
            "type": "Array<string>"
        },
        {
            "name": "removeDeviceSerials",
            "baseName": "remove_device_serials",
            "type": "Array<string>"
        }
    ];
    return DeviceSetPatch;
}());
exports.DeviceSetPatch = DeviceSetPatch;
var DeviceSetPostRequestData = /** @class */ (function () {
    function DeviceSetPostRequestData() {
    }
    DeviceSetPostRequestData.getAttributeTypeMap = function () {
        return DeviceSetPostRequestData.attributeTypeMap;
    };
    DeviceSetPostRequestData.discriminator = undefined;
    DeviceSetPostRequestData.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "devices",
            "baseName": "devices",
            "type": "Array<string>"
        }
    ];
    return DeviceSetPostRequestData;
}());
exports.DeviceSetPostRequestData = DeviceSetPostRequestData;
var DeviceTypeDetail = /** @class */ (function () {
    function DeviceTypeDetail() {
    }
    DeviceTypeDetail.getAttributeTypeMap = function () {
        return DeviceTypeDetail.attributeTypeMap;
    };
    DeviceTypeDetail.discriminator = undefined;
    DeviceTypeDetail.attributeTypeMap = [
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "string"
        },
        {
            "name": "hardwareRevision",
            "baseName": "hardware_revision",
            "type": "string"
        },
        {
            "name": "flashSize",
            "baseName": "flash_size",
            "type": "string"
        },
        {
            "name": "ramSize",
            "baseName": "ram_size",
            "type": "string"
        },
        {
            "name": "serialNumberPrefix",
            "baseName": "serial_number_prefix",
            "type": "string"
        },
        {
            "name": "networkInterfaces",
            "baseName": "network_interfaces",
            "type": "Array<string>"
        },
        {
            "name": "firmwareTypes",
            "baseName": "firmware_types",
            "type": "Array<string>"
        },
        {
            "name": "mobileSdkTypes",
            "baseName": "mobile_sdk_types",
            "type": "Array<string>"
        }
    ];
    return DeviceTypeDetail;
}());
exports.DeviceTypeDetail = DeviceTypeDetail;
var DeviceTypeRevisions = /** @class */ (function (_super) {
    __extends(DeviceTypeRevisions, _super);
    function DeviceTypeRevisions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceTypeRevisions.getAttributeTypeMap = function () {
        return DeviceTypeRevisions.attributeTypeMap;
    };
    DeviceTypeRevisions.discriminator = undefined;
    DeviceTypeRevisions.attributeTypeMap = [];
    return DeviceTypeRevisions;
}(Array));
exports.DeviceTypeRevisions = DeviceTypeRevisions;
var DeviceTypes = /** @class */ (function (_super) {
    __extends(DeviceTypes, _super);
    function DeviceTypes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceTypes.getAttributeTypeMap = function () {
        return DeviceTypes.attributeTypeMap;
    };
    DeviceTypes.discriminator = undefined;
    DeviceTypes.attributeTypeMap = [];
    return DeviceTypes;
}(Array));
exports.DeviceTypes = DeviceTypes;
var DeviceVehicleAssignmentHistory = /** @class */ (function () {
    function DeviceVehicleAssignmentHistory() {
    }
    DeviceVehicleAssignmentHistory.getAttributeTypeMap = function () {
        return DeviceVehicleAssignmentHistory.attributeTypeMap;
    };
    DeviceVehicleAssignmentHistory.discriminator = undefined;
    DeviceVehicleAssignmentHistory.attributeTypeMap = [
        {
            "name": "vin",
            "baseName": "vin",
            "type": "string"
        },
        {
            "name": "assignmentTimestamp",
            "baseName": "assignment_timestamp",
            "type": "Date"
        }
    ];
    return DeviceVehicleAssignmentHistory;
}());
exports.DeviceVehicleAssignmentHistory = DeviceVehicleAssignmentHistory;
var DeviceWithTypeDetails = /** @class */ (function () {
    function DeviceWithTypeDetails() {
    }
    DeviceWithTypeDetails.getAttributeTypeMap = function () {
        return DeviceWithTypeDetails.attributeTypeMap;
    };
    DeviceWithTypeDetails.discriminator = undefined;
    DeviceWithTypeDetails.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "any"
        },
        {
            "name": "hardwareRevision",
            "baseName": "hardware_revision",
            "type": "string"
        },
        {
            "name": "encryptionKeyReference",
            "baseName": "encryption_key_reference",
            "type": "string"
        },
        {
            "name": "installedFirmware",
            "baseName": "installed_firmware",
            "type": "Array<FirmwareVersion>"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        },
        {
            "name": "purchaseOrder",
            "baseName": "purchase_order",
            "type": "string"
        },
        {
            "name": "batchId",
            "baseName": "batch_id",
            "type": "string"
        },
        {
            "name": "shipmentDate",
            "baseName": "shipment_date",
            "type": "Date"
        },
        {
            "name": "logLevel",
            "baseName": "log_level",
            "type": "string"
        },
        {
            "name": "logLevelPerComponent",
            "baseName": "log_level_per_component",
            "type": "any"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "string"
        },
        {
            "name": "applicationDescription",
            "baseName": "application_description",
            "type": "string"
        },
        {
            "name": "deviceSets",
            "baseName": "device_sets",
            "type": "Array<string>"
        }
    ];
    return DeviceWithTypeDetails;
}());
exports.DeviceWithTypeDetails = DeviceWithTypeDetails;
var DocumentLocation = /** @class */ (function () {
    function DocumentLocation() {
    }
    DocumentLocation.getAttributeTypeMap = function () {
        return DocumentLocation.attributeTypeMap;
    };
    DocumentLocation.discriminator = undefined;
    DocumentLocation.attributeTypeMap = [
        {
            "name": "location",
            "baseName": "location",
            "type": "string"
        }
    ];
    return DocumentLocation;
}());
exports.DocumentLocation = DocumentLocation;
var ETag = /** @class */ (function () {
    function ETag() {
    }
    ETag.getAttributeTypeMap = function () {
        return ETag.attributeTypeMap;
    };
    ETag.discriminator = undefined;
    ETag.attributeTypeMap = [
        {
            "name": "eTag",
            "baseName": "e_tag",
            "type": "string"
        }
    ];
    return ETag;
}());
exports.ETag = ETag;
var Empty = /** @class */ (function () {
    function Empty() {
    }
    Empty.getAttributeTypeMap = function () {
        return Empty.attributeTypeMap;
    };
    Empty.discriminator = undefined;
    Empty.attributeTypeMap = [];
    return Empty;
}());
exports.Empty = Empty;
var EncryptionKey = /** @class */ (function () {
    function EncryptionKey() {
    }
    EncryptionKey.getAttributeTypeMap = function () {
        return EncryptionKey.attributeTypeMap;
    };
    EncryptionKey.discriminator = undefined;
    EncryptionKey.attributeTypeMap = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "algorithm",
            "baseName": "algorithm",
            "type": "string"
        },
        {
            "name": "purpose",
            "baseName": "purpose",
            "type": "string"
        }
    ];
    return EncryptionKey;
}());
exports.EncryptionKey = EncryptionKey;
var EncryptionKeyList = /** @class */ (function (_super) {
    __extends(EncryptionKeyList, _super);
    function EncryptionKeyList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EncryptionKeyList.getAttributeTypeMap = function () {
        return EncryptionKeyList.attributeTypeMap;
    };
    EncryptionKeyList.discriminator = undefined;
    EncryptionKeyList.attributeTypeMap = [];
    return EncryptionKeyList;
}(Array));
exports.EncryptionKeyList = EncryptionKeyList;
var EncryptionKeySet = /** @class */ (function () {
    function EncryptionKeySet() {
    }
    EncryptionKeySet.getAttributeTypeMap = function () {
        return EncryptionKeySet.attributeTypeMap;
    };
    EncryptionKeySet.discriminator = undefined;
    EncryptionKeySet.attributeTypeMap = [
        {
            "name": "keys",
            "baseName": "keys",
            "type": "EncryptionKeyList"
        },
        {
            "name": "keySetId",
            "baseName": "key_set_id",
            "type": "string"
        }
    ];
    return EncryptionKeySet;
}());
exports.EncryptionKeySet = EncryptionKeySet;
var ExtendLicenseFailedResponse = /** @class */ (function () {
    function ExtendLicenseFailedResponse() {
    }
    ExtendLicenseFailedResponse.getAttributeTypeMap = function () {
        return ExtendLicenseFailedResponse.attributeTypeMap;
    };
    ExtendLicenseFailedResponse.discriminator = undefined;
    ExtendLicenseFailedResponse.attributeTypeMap = [
        {
            "name": "deviceSerialNumber",
            "baseName": "device_serial_number",
            "type": "string"
        },
        {
            "name": "errorCode",
            "baseName": "error_code",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "licensePolicyUuid",
            "baseName": "license_policy_uuid",
            "type": "string"
        },
        {
            "name": "licensePolicyDescription",
            "baseName": "license_policy_description",
            "type": "string"
        }
    ];
    return ExtendLicenseFailedResponse;
}());
exports.ExtendLicenseFailedResponse = ExtendLicenseFailedResponse;
var FirmwareCompatibilityDetail = /** @class */ (function () {
    function FirmwareCompatibilityDetail() {
    }
    FirmwareCompatibilityDetail.getAttributeTypeMap = function () {
        return FirmwareCompatibilityDetail.attributeTypeMap;
    };
    FirmwareCompatibilityDetail.discriminator = undefined;
    FirmwareCompatibilityDetail.attributeTypeMap = [
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "string"
        },
        {
            "name": "hardwareRevision",
            "baseName": "hardware_revision",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "deviceSet",
            "baseName": "device_set",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "limited",
            "baseName": "limited",
            "type": "boolean"
        },
        {
            "name": "firmwareList",
            "baseName": "firmware_list",
            "type": "Array<FirmwareReference>"
        },
        {
            "name": "mobileSdkList",
            "baseName": "mobile_sdk_list",
            "type": "Array<MobileSdkReference>"
        }
    ];
    return FirmwareCompatibilityDetail;
}());
exports.FirmwareCompatibilityDetail = FirmwareCompatibilityDetail;
var FirmwareCompatibilityList = /** @class */ (function (_super) {
    __extends(FirmwareCompatibilityList, _super);
    function FirmwareCompatibilityList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirmwareCompatibilityList.getAttributeTypeMap = function () {
        return FirmwareCompatibilityList.attributeTypeMap;
    };
    FirmwareCompatibilityList.discriminator = undefined;
    FirmwareCompatibilityList.attributeTypeMap = [];
    return FirmwareCompatibilityList;
}(Array));
exports.FirmwareCompatibilityList = FirmwareCompatibilityList;
var FirmwareDetail = /** @class */ (function () {
    function FirmwareDetail() {
    }
    FirmwareDetail.getAttributeTypeMap = function () {
        return FirmwareDetail.attributeTypeMap;
    };
    FirmwareDetail.discriminator = undefined;
    FirmwareDetail.attributeTypeMap = [
        {
            "name": "firmwareType",
            "baseName": "firmware_type",
            "type": "string"
        },
        {
            "name": "firmwareVersion",
            "baseName": "firmware_version",
            "type": "string"
        },
        {
            "name": "firmwareId",
            "baseName": "firmware_id",
            "type": "string"
        },
        {
            "name": "fingerprint",
            "baseName": "fingerprint",
            "type": "string"
        },
        {
            "name": "downloadUrl",
            "baseName": "download_url",
            "type": "string"
        }
    ];
    return FirmwareDetail;
}());
exports.FirmwareDetail = FirmwareDetail;
var FirmwareHistory = /** @class */ (function () {
    function FirmwareHistory() {
    }
    FirmwareHistory.getAttributeTypeMap = function () {
        return FirmwareHistory.attributeTypeMap;
    };
    FirmwareHistory.discriminator = undefined;
    FirmwareHistory.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "assignmentTimestamp",
            "baseName": "assignment_timestamp",
            "type": "Date"
        },
        {
            "name": "firmwareType",
            "baseName": "firmware_type",
            "type": "string"
        },
        {
            "name": "firmwareVersion",
            "baseName": "firmware_version",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        }
    ];
    return FirmwareHistory;
}());
exports.FirmwareHistory = FirmwareHistory;
var FirmwareList = /** @class */ (function (_super) {
    __extends(FirmwareList, _super);
    function FirmwareList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirmwareList.getAttributeTypeMap = function () {
        return FirmwareList.attributeTypeMap;
    };
    FirmwareList.discriminator = undefined;
    FirmwareList.attributeTypeMap = [];
    return FirmwareList;
}(Array));
exports.FirmwareList = FirmwareList;
var FirmwareReference = /** @class */ (function () {
    function FirmwareReference() {
    }
    FirmwareReference.getAttributeTypeMap = function () {
        return FirmwareReference.attributeTypeMap;
    };
    FirmwareReference.discriminator = undefined;
    FirmwareReference.attributeTypeMap = [
        {
            "name": "firmwareType",
            "baseName": "firmware_type",
            "type": "string"
        },
        {
            "name": "firmwareVersion",
            "baseName": "firmware_version",
            "type": "string"
        }
    ];
    return FirmwareReference;
}());
exports.FirmwareReference = FirmwareReference;
/**
* Firmware type identifier.
*/
var FirmwareTypeEnum = /** @class */ (function () {
    function FirmwareTypeEnum() {
    }
    FirmwareTypeEnum.getAttributeTypeMap = function () {
        return FirmwareTypeEnum.attributeTypeMap;
    };
    FirmwareTypeEnum.discriminator = undefined;
    FirmwareTypeEnum.attributeTypeMap = [];
    return FirmwareTypeEnum;
}());
exports.FirmwareTypeEnum = FirmwareTypeEnum;
var FirmwareTypeList = /** @class */ (function (_super) {
    __extends(FirmwareTypeList, _super);
    function FirmwareTypeList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirmwareTypeList.getAttributeTypeMap = function () {
        return FirmwareTypeList.attributeTypeMap;
    };
    FirmwareTypeList.discriminator = undefined;
    FirmwareTypeList.attributeTypeMap = [];
    return FirmwareTypeList;
}(Array));
exports.FirmwareTypeList = FirmwareTypeList;
var FirmwareVersion = /** @class */ (function () {
    function FirmwareVersion() {
    }
    FirmwareVersion.getAttributeTypeMap = function () {
        return FirmwareVersion.attributeTypeMap;
    };
    FirmwareVersion.discriminator = undefined;
    FirmwareVersion.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        }
    ];
    return FirmwareVersion;
}());
exports.FirmwareVersion = FirmwareVersion;
var FirmwareVersionList = /** @class */ (function (_super) {
    __extends(FirmwareVersionList, _super);
    function FirmwareVersionList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirmwareVersionList.getAttributeTypeMap = function () {
        return FirmwareVersionList.attributeTypeMap;
    };
    FirmwareVersionList.discriminator = undefined;
    FirmwareVersionList.attributeTypeMap = [];
    return FirmwareVersionList;
}(Array));
exports.FirmwareVersionList = FirmwareVersionList;
var JwksKeys = /** @class */ (function () {
    function JwksKeys() {
    }
    JwksKeys.getAttributeTypeMap = function () {
        return JwksKeys.attributeTypeMap;
    };
    JwksKeys.discriminator = undefined;
    JwksKeys.attributeTypeMap = [
        {
            "name": "e",
            "baseName": "e",
            "type": "string"
        },
        {
            "name": "kid",
            "baseName": "kid",
            "type": "string"
        },
        {
            "name": "kty",
            "baseName": "kty",
            "type": "string"
        },
        {
            "name": "n",
            "baseName": "n",
            "type": "string"
        },
        {
            "name": "x5c",
            "baseName": "x5c",
            "type": "Array<string>"
        },
        {
            "name": "x5t",
            "baseName": "x5t",
            "type": "string"
        }
    ];
    return JwksKeys;
}());
exports.JwksKeys = JwksKeys;
var JwksTokenResponse = /** @class */ (function (_super) {
    __extends(JwksTokenResponse, _super);
    function JwksTokenResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JwksTokenResponse.getAttributeTypeMap = function () {
        return JwksTokenResponse.attributeTypeMap;
    };
    JwksTokenResponse.discriminator = undefined;
    JwksTokenResponse.attributeTypeMap = [];
    return JwksTokenResponse;
}(Array));
exports.JwksTokenResponse = JwksTokenResponse;
var LicenseItem = /** @class */ (function () {
    function LicenseItem() {
    }
    LicenseItem.getAttributeTypeMap = function () {
        return LicenseItem.attributeTypeMap;
    };
    LicenseItem.discriminator = undefined;
    LicenseItem.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "startTimestamp",
            "baseName": "start_timestamp",
            "type": "Date"
        },
        {
            "name": "endTimestamp",
            "baseName": "end_timestamp",
            "type": "Date"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "string"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        },
        {
            "name": "licenseActiveToken",
            "baseName": "license_active_token",
            "type": "string"
        },
        {
            "name": "extension_state",
            "baseName": "extension_state",
            "type": "string"
        }
    ];
    return LicenseItem;
}());
exports.LicenseItem = LicenseItem;
var LicenseListItem = /** @class */ (function () {
    function LicenseListItem() {
    }
    LicenseListItem.getAttributeTypeMap = function () {
        return LicenseListItem.attributeTypeMap;
    };
    LicenseListItem.discriminator = undefined;
    LicenseListItem.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "startTimestamp",
            "baseName": "start_timestamp",
            "type": "Date"
        },
        {
            "name": "endTimestamp",
            "baseName": "end_timestamp",
            "type": "Date"
        },
        {
            "name": "application",
            "baseName": "application",
            "type": "string"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        }
    ];
    return LicenseListItem;
}());
exports.LicenseListItem = LicenseListItem;
var LicensePolicy = /** @class */ (function () {
    function LicensePolicy() {
    }
    LicensePolicy.getAttributeTypeMap = function () {
        return LicensePolicy.attributeTypeMap;
    };
    LicensePolicy.discriminator = undefined;
    LicensePolicy.attributeTypeMap = [
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "limitHourly",
            "baseName": "limit_hourly",
            "type": "number"
        },
        {
            "name": "limitDaily",
            "baseName": "limit_daily",
            "type": "number"
        },
        {
            "name": "limitMonthly",
            "baseName": "limit_monthly",
            "type": "number"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        },
        {
            "name": "extensionPeriod",
            "baseName": "extension_period",
            "type": "number"
        }
    ];
    return LicensePolicy;
}());
exports.LicensePolicy = LicensePolicy;
var LicensePolicyId = /** @class */ (function () {
    function LicensePolicyId() {
    }
    LicensePolicyId.getAttributeTypeMap = function () {
        return LicensePolicyId.attributeTypeMap;
    };
    LicensePolicyId.discriminator = undefined;
    LicensePolicyId.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        }
    ];
    return LicensePolicyId;
}());
exports.LicensePolicyId = LicensePolicyId;
var LogFile = /** @class */ (function () {
    function LogFile() {
    }
    LogFile.getAttributeTypeMap = function () {
        return LogFile.attributeTypeMap;
    };
    LogFile.discriminator = undefined;
    LogFile.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "Date"
        }
    ];
    return LogFile;
}());
exports.LogFile = LogFile;
var LogFileContent = /** @class */ (function () {
    function LogFileContent() {
    }
    LogFileContent.getAttributeTypeMap = function () {
        return LogFileContent.attributeTypeMap;
    };
    LogFileContent.discriminator = undefined;
    LogFileContent.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        }
    ];
    return LogFileContent;
}());
exports.LogFileContent = LogFileContent;
var LogLevel = /** @class */ (function () {
    function LogLevel() {
    }
    LogLevel.getAttributeTypeMap = function () {
        return LogLevel.attributeTypeMap;
    };
    LogLevel.discriminator = undefined;
    LogLevel.attributeTypeMap = [
        {
            "name": "logLevel",
            "baseName": "log_level",
            "type": "string"
        },
        {
            "name": "logLevelPerComponent",
            "baseName": "log_level_per_component",
            "type": "any"
        }
    ];
    return LogLevel;
}());
exports.LogLevel = LogLevel;
var MobileSdkArtifactLocation = /** @class */ (function () {
    function MobileSdkArtifactLocation() {
    }
    MobileSdkArtifactLocation.getAttributeTypeMap = function () {
        return MobileSdkArtifactLocation.attributeTypeMap;
    };
    MobileSdkArtifactLocation.discriminator = undefined;
    MobileSdkArtifactLocation.attributeTypeMap = [
        {
            "name": "location",
            "baseName": "location",
            "type": "string"
        }
    ];
    return MobileSdkArtifactLocation;
}());
exports.MobileSdkArtifactLocation = MobileSdkArtifactLocation;
var MobileSdkDetail = /** @class */ (function () {
    function MobileSdkDetail() {
    }
    MobileSdkDetail.getAttributeTypeMap = function () {
        return MobileSdkDetail.attributeTypeMap;
    };
    MobileSdkDetail.discriminator = undefined;
    MobileSdkDetail.attributeTypeMap = [
        {
            "name": "mobileSdkType",
            "baseName": "mobile_sdk_type",
            "type": "string"
        },
        {
            "name": "mobileSdkVersion",
            "baseName": "mobile_sdk_version",
            "type": "string"
        },
        {
            "name": "mobileSdkS3Url",
            "baseName": "mobile_sdk_s3_url",
            "type": "string"
        },
        {
            "name": "uploaded",
            "baseName": "uploaded",
            "type": "boolean"
        }
    ];
    return MobileSdkDetail;
}());
exports.MobileSdkDetail = MobileSdkDetail;
var MobileSdkList = /** @class */ (function (_super) {
    __extends(MobileSdkList, _super);
    function MobileSdkList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileSdkList.getAttributeTypeMap = function () {
        return MobileSdkList.attributeTypeMap;
    };
    MobileSdkList.discriminator = undefined;
    MobileSdkList.attributeTypeMap = [];
    return MobileSdkList;
}(Array));
exports.MobileSdkList = MobileSdkList;
var MobileSdkReference = /** @class */ (function () {
    function MobileSdkReference() {
    }
    MobileSdkReference.getAttributeTypeMap = function () {
        return MobileSdkReference.attributeTypeMap;
    };
    MobileSdkReference.discriminator = undefined;
    MobileSdkReference.attributeTypeMap = [
        {
            "name": "mobileSdkType",
            "baseName": "mobile_sdk_type",
            "type": "string"
        },
        {
            "name": "mobileSdkVersion",
            "baseName": "mobile_sdk_version",
            "type": "string"
        }
    ];
    return MobileSdkReference;
}());
exports.MobileSdkReference = MobileSdkReference;
/**
* Mobile SDK type identifier.
*/
var MobileSdkTypeEnum = /** @class */ (function () {
    function MobileSdkTypeEnum() {
    }
    MobileSdkTypeEnum.getAttributeTypeMap = function () {
        return MobileSdkTypeEnum.attributeTypeMap;
    };
    MobileSdkTypeEnum.discriminator = undefined;
    MobileSdkTypeEnum.attributeTypeMap = [];
    return MobileSdkTypeEnum;
}());
exports.MobileSdkTypeEnum = MobileSdkTypeEnum;
var MobileSdkTypeList = /** @class */ (function (_super) {
    __extends(MobileSdkTypeList, _super);
    function MobileSdkTypeList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileSdkTypeList.getAttributeTypeMap = function () {
        return MobileSdkTypeList.attributeTypeMap;
    };
    MobileSdkTypeList.discriminator = undefined;
    MobileSdkTypeList.attributeTypeMap = [];
    return MobileSdkTypeList;
}(Array));
exports.MobileSdkTypeList = MobileSdkTypeList;
var ModelError = /** @class */ (function () {
    function ModelError() {
    }
    ModelError.getAttributeTypeMap = function () {
        return ModelError.attributeTypeMap;
    };
    ModelError.discriminator = undefined;
    ModelError.attributeTypeMap = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }
    ];
    return ModelError;
}());
exports.ModelError = ModelError;
var ParameterSchedule = /** @class */ (function () {
    function ParameterSchedule() {
    }
    ParameterSchedule.getAttributeTypeMap = function () {
        return ParameterSchedule.attributeTypeMap;
    };
    ParameterSchedule.discriminator = undefined;
    ParameterSchedule.attributeTypeMap = [
        {
            "name": "interval",
            "baseName": "interval",
            "type": "number"
        },
        {
            "name": "samplingParameters",
            "baseName": "sampling_parameters",
            "type": "Array<SamplingParameter>"
        }
    ];
    return ParameterSchedule;
}());
exports.ParameterSchedule = ParameterSchedule;
var PasswordChangeRequest = /** @class */ (function () {
    function PasswordChangeRequest() {
    }
    PasswordChangeRequest.getAttributeTypeMap = function () {
        return PasswordChangeRequest.attributeTypeMap;
    };
    PasswordChangeRequest.discriminator = undefined;
    PasswordChangeRequest.attributeTypeMap = [
        {
            "name": "oldPassword",
            "baseName": "old_password",
            "type": "string"
        },
        {
            "name": "newPassword",
            "baseName": "new_password",
            "type": "string"
        }
    ];
    return PasswordChangeRequest;
}());
exports.PasswordChangeRequest = PasswordChangeRequest;
var PasswordItem = /** @class */ (function () {
    function PasswordItem() {
    }
    PasswordItem.getAttributeTypeMap = function () {
        return PasswordItem.attributeTypeMap;
    };
    PasswordItem.discriminator = undefined;
    PasswordItem.attributeTypeMap = [
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        }
    ];
    return PasswordItem;
}());
exports.PasswordItem = PasswordItem;
var ResetDeviceBindingRequest = /** @class */ (function () {
    function ResetDeviceBindingRequest() {
    }
    ResetDeviceBindingRequest.getAttributeTypeMap = function () {
        return ResetDeviceBindingRequest.attributeTypeMap;
    };
    ResetDeviceBindingRequest.discriminator = undefined;
    ResetDeviceBindingRequest.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "uniqueSerialNumber",
            "type": "string"
        }
    ];
    return ResetDeviceBindingRequest;
}());
exports.ResetDeviceBindingRequest = ResetDeviceBindingRequest;
var Roles = /** @class */ (function (_super) {
    __extends(Roles, _super);
    function Roles() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Roles.getAttributeTypeMap = function () {
        return Roles.attributeTypeMap;
    };
    Roles.discriminator = undefined;
    Roles.attributeTypeMap = [];
    return Roles;
}(Array));
exports.Roles = Roles;
var SamplingParameter = /** @class */ (function () {
    function SamplingParameter() {
    }
    SamplingParameter.getAttributeTypeMap = function () {
        return SamplingParameter.attributeTypeMap;
    };
    SamplingParameter.discriminator = undefined;
    SamplingParameter.attributeTypeMap = [
        {
            "name": "parameter",
            "baseName": "parameter",
            "type": "string"
        },
        {
            "name": "interval",
            "baseName": "interval",
            "type": "number"
        },
        {
            "name": "offset",
            "baseName": "offset",
            "type": "number"
        },
        {
            "name": "nonObdParameter",
            "baseName": "non_obd_parameter",
            "type": "boolean"
        }
    ];
    return SamplingParameter;
}());
exports.SamplingParameter = SamplingParameter;
var SystemInformationResponse = /** @class */ (function () {
    function SystemInformationResponse() {
    }
    SystemInformationResponse.getAttributeTypeMap = function () {
        return SystemInformationResponse.attributeTypeMap;
    };
    SystemInformationResponse.discriminator = undefined;
    SystemInformationResponse.attributeTypeMap = [
        {
            "name": "apiVersion",
            "baseName": "api_version",
            "type": "string"
        },
        {
            "name": "componentName",
            "baseName": "component_name",
            "type": "string"
        },
        {
            "name": "componentVersion",
            "baseName": "component_version",
            "type": "string"
        },
        {
            "name": "stageName",
            "baseName": "stage_name",
            "type": "string"
        },
        {
            "name": "additionalInfo",
            "baseName": "additional_info",
            "type": "any"
        }
    ];
    return SystemInformationResponse;
}());
exports.SystemInformationResponse = SystemInformationResponse;
var TransmissionSchedule = /** @class */ (function () {
    function TransmissionSchedule() {
    }
    TransmissionSchedule.getAttributeTypeMap = function () {
        return TransmissionSchedule.attributeTypeMap;
    };
    TransmissionSchedule.discriminator = undefined;
    TransmissionSchedule.attributeTypeMap = [
        {
            "name": "baseInterval",
            "baseName": "base_interval",
            "type": "number"
        }
    ];
    return TransmissionSchedule;
}());
exports.TransmissionSchedule = TransmissionSchedule;
var UserAccount = /** @class */ (function () {
    function UserAccount() {
    }
    UserAccount.getAttributeTypeMap = function () {
        return UserAccount.attributeTypeMap;
    };
    UserAccount.discriminator = undefined;
    UserAccount.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return UserAccount;
}());
exports.UserAccount = UserAccount;
var UserAccountList = /** @class */ (function (_super) {
    __extends(UserAccountList, _super);
    function UserAccountList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UserAccountList.getAttributeTypeMap = function () {
        return UserAccountList.attributeTypeMap;
    };
    UserAccountList.discriminator = undefined;
    UserAccountList.attributeTypeMap = [];
    return UserAccountList;
}(Array));
exports.UserAccountList = UserAccountList;
var UserDetailBase = /** @class */ (function () {
    function UserDetailBase() {
    }
    UserDetailBase.getAttributeTypeMap = function () {
        return UserDetailBase.attributeTypeMap;
    };
    UserDetailBase.discriminator = undefined;
    UserDetailBase.attributeTypeMap = [
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>"
        },
        {
            "name": "street",
            "baseName": "street",
            "type": "string"
        },
        {
            "name": "postalAddress",
            "baseName": "postal_address",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string"
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "string"
        },
        {
            "name": "organizationUnit",
            "baseName": "organization_unit",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "photo",
            "baseName": "photo",
            "type": "string"
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        }
    ];
    return UserDetailBase;
}());
exports.UserDetailBase = UserDetailBase;
var UserListItem = /** @class */ (function () {
    function UserListItem() {
    }
    UserListItem.getAttributeTypeMap = function () {
        return UserListItem.attributeTypeMap;
    };
    UserListItem.discriminator = undefined;
    UserListItem.attributeTypeMap = [
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>"
        },
        {
            "name": "accounts",
            "baseName": "accounts",
            "type": "Array<UserAccount>"
        }
    ];
    return UserListItem;
}());
exports.UserListItem = UserListItem;
var UserLockState = /** @class */ (function () {
    function UserLockState() {
    }
    UserLockState.getAttributeTypeMap = function () {
        return UserLockState.attributeTypeMap;
    };
    UserLockState.discriminator = undefined;
    UserLockState.attributeTypeMap = [
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        }
    ];
    return UserLockState;
}());
exports.UserLockState = UserLockState;
var UserOwnDetails = /** @class */ (function () {
    function UserOwnDetails() {
    }
    UserOwnDetails.getAttributeTypeMap = function () {
        return UserOwnDetails.attributeTypeMap;
    };
    UserOwnDetails.discriminator = undefined;
    UserOwnDetails.attributeTypeMap = [
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "street",
            "baseName": "street",
            "type": "string"
        },
        {
            "name": "postalAddress",
            "baseName": "postal_address",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string"
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "string"
        },
        {
            "name": "organizationUnit",
            "baseName": "organization_unit",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }
    ];
    return UserOwnDetails;
}());
exports.UserOwnDetails = UserOwnDetails;
var VehicleDetail = /** @class */ (function () {
    function VehicleDetail() {
    }
    VehicleDetail.getAttributeTypeMap = function () {
        return VehicleDetail.attributeTypeMap;
    };
    VehicleDetail.discriminator = undefined;
    VehicleDetail.attributeTypeMap = [
        {
            "name": "vin",
            "baseName": "vin",
            "type": "string"
        },
        {
            "name": "licensePlateNumber",
            "baseName": "license_plate_number",
            "type": "string"
        },
        {
            "name": "make",
            "baseName": "make",
            "type": "string"
        },
        {
            "name": "countryOfInstallation",
            "baseName": "country_of_installation",
            "type": "string"
        },
        {
            "name": "model",
            "baseName": "model",
            "type": "string"
        },
        {
            "name": "modelYear",
            "baseName": "model_year",
            "type": "string"
        },
        {
            "name": "fuelType",
            "baseName": "fuel_type",
            "type": "string"
        },
        {
            "name": "engineType",
            "baseName": "engine_type",
            "type": "string"
        },
        {
            "name": "engineCode",
            "baseName": "engine_code",
            "type": "string"
        },
        {
            "name": "kType",
            "baseName": "k_type",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "string"
        }
    ];
    return VehicleDetail;
}());
exports.VehicleDetail = VehicleDetail;
var VehicleEcuList = /** @class */ (function (_super) {
    __extends(VehicleEcuList, _super);
    function VehicleEcuList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VehicleEcuList.getAttributeTypeMap = function () {
        return VehicleEcuList.attributeTypeMap;
    };
    VehicleEcuList.discriminator = undefined;
    VehicleEcuList.attributeTypeMap = [];
    return VehicleEcuList;
}(Array));
exports.VehicleEcuList = VehicleEcuList;
var VehicleList = /** @class */ (function (_super) {
    __extends(VehicleList, _super);
    function VehicleList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VehicleList.getAttributeTypeMap = function () {
        return VehicleList.attributeTypeMap;
    };
    VehicleList.discriminator = undefined;
    VehicleList.attributeTypeMap = [];
    return VehicleList;
}(Array));
exports.VehicleList = VehicleList;
var VehicleListItem = /** @class */ (function () {
    function VehicleListItem() {
    }
    VehicleListItem.getAttributeTypeMap = function () {
        return VehicleListItem.attributeTypeMap;
    };
    VehicleListItem.discriminator = undefined;
    VehicleListItem.attributeTypeMap = [
        {
            "name": "vin",
            "baseName": "vin",
            "type": "string"
        },
        {
            "name": "licensePlateNumber",
            "baseName": "license_plate_number",
            "type": "string"
        },
        {
            "name": "make",
            "baseName": "make",
            "type": "string"
        },
        {
            "name": "model",
            "baseName": "model",
            "type": "string"
        },
        {
            "name": "modelYear",
            "baseName": "model_year",
            "type": "string"
        },
        {
            "name": "engineType",
            "baseName": "engine_type",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        }
    ];
    return VehicleListItem;
}());
exports.VehicleListItem = VehicleListItem;
var ApplicationItem = /** @class */ (function () {
    function ApplicationItem() {
    }
    ApplicationItem.getAttributeTypeMap = function () {
        return ApplicationItem.attributeTypeMap;
    };
    ApplicationItem.discriminator = undefined;
    ApplicationItem.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "transmissionSchedule",
            "baseName": "transmission_schedule",
            "type": "TransmissionSchedule"
        },
        {
            "name": "customerVdcEndpoint",
            "baseName": "customer_vdc_endpoint",
            "type": "CustomerVdcEndpoint"
        },
        {
            "name": "forwardTo",
            "baseName": "forward_to",
            "type": "Array<CustomerVdcEndpoint>"
        },
        {
            "name": "dataManagedBy",
            "baseName": "data_managed_by",
            "type": "ApplicationItem.DataManagedByEnum"
        },
        {
            "name": "collectionMode",
            "baseName": "collection_mode",
            "type": "ApplicationItem.CollectionModeEnum"
        },
        {
            "name": "parameterSchedule",
            "baseName": "parameter_schedule",
            "type": "ParameterSchedule"
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "Array<string>"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "iosAppBundleId",
            "baseName": "ios_app_bundle_id",
            "type": "string"
        },
        {
            "name": "storeDataInRvd",
            "baseName": "store_data_in_rvd",
            "type": "boolean"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        }
    ];
    return ApplicationItem;
}());
exports.ApplicationItem = ApplicationItem;
(function (ApplicationItem) {
    var DataManagedByEnum;
    (function (DataManagedByEnum) {
        DataManagedByEnum[DataManagedByEnum["RVD"] = 'RVD'] = "RVD";
        DataManagedByEnum[DataManagedByEnum["CUSTOMER"] = 'CUSTOMER'] = "CUSTOMER";
    })(DataManagedByEnum = ApplicationItem.DataManagedByEnum || (ApplicationItem.DataManagedByEnum = {}));
    var CollectionModeEnum;
    (function (CollectionModeEnum) {
        CollectionModeEnum[CollectionModeEnum["MANAGED"] = 'MANAGED'] = "MANAGED";
        CollectionModeEnum[CollectionModeEnum["DEVICECONTROLLED"] = 'DEVICE_CONTROLLED'] = "DEVICECONTROLLED";
    })(CollectionModeEnum = ApplicationItem.CollectionModeEnum || (ApplicationItem.CollectionModeEnum = {}));
})(ApplicationItem = exports.ApplicationItem || (exports.ApplicationItem = {}));
exports.ApplicationItem = ApplicationItem;
var ApplicationItemExtended = /** @class */ (function () {
    function ApplicationItemExtended() {
    }
    ApplicationItemExtended.getAttributeTypeMap = function () {
        return ApplicationItemExtended.attributeTypeMap;
    };
    ApplicationItemExtended.discriminator = undefined;
    ApplicationItemExtended.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "transmissionSchedule",
            "baseName": "transmission_schedule",
            "type": "TransmissionSchedule"
        },
        {
            "name": "customerVdcEndpoint",
            "baseName": "customer_vdc_endpoint",
            "type": "CustomerVdcEndpoint"
        },
        {
            "name": "forwardTo",
            "baseName": "forward_to",
            "type": "Array<CustomerVdcEndpoint>"
        },
        {
            "name": "dataManagedBy",
            "baseName": "data_managed_by",
            "type": "ApplicationItemExtended.DataManagedByEnum"
        },
        {
            "name": "collectionMode",
            "baseName": "collection_mode",
            "type": "ApplicationItemExtended.CollectionModeEnum"
        },
        {
            "name": "parameterSchedule",
            "baseName": "parameter_schedule",
            "type": "ParameterSchedule"
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "Array<string>"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "iosAppBundleId",
            "baseName": "ios_app_bundle_id",
            "type": "string"
        },
        {
            "name": "storeDataInRvd",
            "baseName": "store_data_in_rvd",
            "type": "boolean"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        }
    ];
    return ApplicationItemExtended;
}());
exports.ApplicationItemExtended = ApplicationItemExtended;
(function (ApplicationItemExtended) {
    var DataManagedByEnum;
    (function (DataManagedByEnum) {
        DataManagedByEnum[DataManagedByEnum["RVD"] = 'RVD'] = "RVD";
        DataManagedByEnum[DataManagedByEnum["CUSTOMER"] = 'CUSTOMER'] = "CUSTOMER";
    })(DataManagedByEnum = ApplicationItemExtended.DataManagedByEnum || (ApplicationItemExtended.DataManagedByEnum = {}));
    var CollectionModeEnum;
    (function (CollectionModeEnum) {
        CollectionModeEnum[CollectionModeEnum["MANAGED"] = 'MANAGED'] = "MANAGED";
        CollectionModeEnum[CollectionModeEnum["DEVICECONTROLLED"] = 'DEVICE_CONTROLLED'] = "DEVICECONTROLLED";
    })(CollectionModeEnum = ApplicationItemExtended.CollectionModeEnum || (ApplicationItemExtended.CollectionModeEnum = {}));
})(ApplicationItemExtended = exports.ApplicationItemExtended || (exports.ApplicationItemExtended = {}));
exports.ApplicationItemExtended = ApplicationItemExtended;
var DeviceApplication = /** @class */ (function () {
    function DeviceApplication() {
    }
    DeviceApplication.getAttributeTypeMap = function () {
        return DeviceApplication.attributeTypeMap;
    };
    DeviceApplication.discriminator = undefined;
    DeviceApplication.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "transmissionSchedule",
            "baseName": "transmission_schedule",
            "type": "TransmissionSchedule"
        },
        {
            "name": "customerVdcEndpoint",
            "baseName": "customer_vdc_endpoint",
            "type": "CustomerVdcEndpoint"
        },
        {
            "name": "forwardTo",
            "baseName": "forward_to",
            "type": "Array<CustomerVdcEndpoint>"
        },
        {
            "name": "dataManagedBy",
            "baseName": "data_managed_by",
            "type": "DeviceApplication.DataManagedByEnum"
        },
        {
            "name": "collectionMode",
            "baseName": "collection_mode",
            "type": "DeviceApplication.CollectionModeEnum"
        },
        {
            "name": "parameterSchedule",
            "baseName": "parameter_schedule",
            "type": "ParameterSchedule"
        },
        {
            "name": "parameters",
            "baseName": "parameters",
            "type": "Array<string>"
        },
        {
            "name": "licensePolicy",
            "baseName": "license_policy",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "iosAppBundleId",
            "baseName": "ios_app_bundle_id",
            "type": "string"
        },
        {
            "name": "storeDataInRvd",
            "baseName": "store_data_in_rvd",
            "type": "boolean"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        },
        {
            "name": "eTag",
            "baseName": "e_tag",
            "type": "string"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        }
    ];
    return DeviceApplication;
}());
exports.DeviceApplication = DeviceApplication;
(function (DeviceApplication) {
    var DataManagedByEnum;
    (function (DataManagedByEnum) {
        DataManagedByEnum[DataManagedByEnum["RVD"] = 'RVD'] = "RVD";
        DataManagedByEnum[DataManagedByEnum["CUSTOMER"] = 'CUSTOMER'] = "CUSTOMER";
    })(DataManagedByEnum = DeviceApplication.DataManagedByEnum || (DeviceApplication.DataManagedByEnum = {}));
    var CollectionModeEnum;
    (function (CollectionModeEnum) {
        CollectionModeEnum[CollectionModeEnum["MANAGED"] = 'MANAGED'] = "MANAGED";
        CollectionModeEnum[CollectionModeEnum["DEVICECONTROLLED"] = 'DEVICE_CONTROLLED'] = "DEVICECONTROLLED";
    })(CollectionModeEnum = DeviceApplication.CollectionModeEnum || (DeviceApplication.CollectionModeEnum = {}));
})(DeviceApplication = exports.DeviceApplication || (exports.DeviceApplication = {}));
exports.DeviceApplication = DeviceApplication;
var DeviceExtended = /** @class */ (function () {
    function DeviceExtended() {
    }
    DeviceExtended.getAttributeTypeMap = function () {
        return DeviceExtended.attributeTypeMap;
    };
    DeviceExtended.discriminator = undefined;
    DeviceExtended.attributeTypeMap = [
        {
            "name": "uniqueSerialNumber",
            "baseName": "unique_serial_number",
            "type": "string"
        },
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "string"
        },
        {
            "name": "hardwareRevision",
            "baseName": "hardware_revision",
            "type": "string"
        },
        {
            "name": "encryptionKeyReference",
            "baseName": "encryption_key_reference",
            "type": "string"
        },
        {
            "name": "installedFirmware",
            "baseName": "installed_firmware",
            "type": "Array<FirmwareVersion>"
        },
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "purchaseOrder",
            "baseName": "purchase_order",
            "type": "string"
        },
        {
            "name": "batchId",
            "baseName": "batch_id",
            "type": "string"
        },
        {
            "name": "shipmentDate",
            "baseName": "shipment_date",
            "type": "Date"
        },
        {
            "name": "logLevel",
            "baseName": "log_level",
            "type": "string"
        },
        {
            "name": "logLevelPerComponent",
            "baseName": "log_level_per_component",
            "type": "any"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        }
    ];
    return DeviceExtended;
}());
exports.DeviceExtended = DeviceExtended;
var FirmwareCompatibilityDetailExtended = /** @class */ (function () {
    function FirmwareCompatibilityDetailExtended() {
    }
    FirmwareCompatibilityDetailExtended.getAttributeTypeMap = function () {
        return FirmwareCompatibilityDetailExtended.attributeTypeMap;
    };
    FirmwareCompatibilityDetailExtended.discriminator = undefined;
    FirmwareCompatibilityDetailExtended.attributeTypeMap = [
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "string"
        },
        {
            "name": "hardwareRevision",
            "baseName": "hardware_revision",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "deviceSet",
            "baseName": "device_set",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "limited",
            "baseName": "limited",
            "type": "boolean"
        },
        {
            "name": "firmwareList",
            "baseName": "firmware_list",
            "type": "Array<FirmwareReference>"
        },
        {
            "name": "mobileSdkList",
            "baseName": "mobile_sdk_list",
            "type": "Array<MobileSdkReference>"
        },
        {
            "name": "deviceSetName",
            "baseName": "device_set_name",
            "type": "string"
        }
    ];
    return FirmwareCompatibilityDetailExtended;
}());
exports.FirmwareCompatibilityDetailExtended = FirmwareCompatibilityDetailExtended;
var LicensePolicyItem = /** @class */ (function () {
    function LicensePolicyItem() {
    }
    LicensePolicyItem.getAttributeTypeMap = function () {
        return LicensePolicyItem.attributeTypeMap;
    };
    LicensePolicyItem.discriminator = undefined;
    LicensePolicyItem.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "limitHourly",
            "baseName": "limit_hourly",
            "type": "number"
        },
        {
            "name": "limitDaily",
            "baseName": "limit_daily",
            "type": "number"
        },
        {
            "name": "limitMonthly",
            "baseName": "limit_monthly",
            "type": "number"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        },
        {
            "name": "extensionPeriod",
            "baseName": "extension_period",
            "type": "number"
        }
    ];
    return LicensePolicyItem;
}());
exports.LicensePolicyItem = LicensePolicyItem;
var LicensePolicyLicensesExpiringSoon = /** @class */ (function () {
    function LicensePolicyLicensesExpiringSoon() {
    }
    LicensePolicyLicensesExpiringSoon.getAttributeTypeMap = function () {
        return LicensePolicyLicensesExpiringSoon.attributeTypeMap;
    };
    LicensePolicyLicensesExpiringSoon.discriminator = undefined;
    LicensePolicyLicensesExpiringSoon.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "licensesExpiringSoon",
            "baseName": "licenses_expiring_soon",
            "type": "number"
        }
    ];
    return LicensePolicyLicensesExpiringSoon;
}());
exports.LicensePolicyLicensesExpiringSoon = LicensePolicyLicensesExpiringSoon;
var UserDetail = /** @class */ (function () {
    function UserDetail() {
    }
    UserDetail.getAttributeTypeMap = function () {
        return UserDetail.attributeTypeMap;
    };
    UserDetail.discriminator = undefined;
    UserDetail.attributeTypeMap = [
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>"
        },
        {
            "name": "street",
            "baseName": "street",
            "type": "string"
        },
        {
            "name": "postalAddress",
            "baseName": "postal_address",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string"
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "string"
        },
        {
            "name": "organizationUnit",
            "baseName": "organization_unit",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "photo",
            "baseName": "photo",
            "type": "string"
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        },
        {
            "name": "accounts",
            "baseName": "accounts",
            "type": "Array<string>"
        }
    ];
    return UserDetail;
}());
exports.UserDetail = UserDetail;
var UserDetailExtended = /** @class */ (function () {
    function UserDetailExtended() {
    }
    UserDetailExtended.getAttributeTypeMap = function () {
        return UserDetailExtended.attributeTypeMap;
    };
    UserDetailExtended.discriminator = undefined;
    UserDetailExtended.attributeTypeMap = [
        {
            "name": "loginName",
            "baseName": "login_name",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<string>"
        },
        {
            "name": "street",
            "baseName": "street",
            "type": "string"
        },
        {
            "name": "postalAddress",
            "baseName": "postal_address",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string"
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "string"
        },
        {
            "name": "organizationUnit",
            "baseName": "organization_unit",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "photo",
            "baseName": "photo",
            "type": "string"
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "UserAccount"
        }
    ];
    return UserDetailExtended;
}());
exports.UserDetailExtended = UserDetailExtended;
var LicensePolicyItemExtended = /** @class */ (function () {
    function LicensePolicyItemExtended() {
    }
    LicensePolicyItemExtended.getAttributeTypeMap = function () {
        return LicensePolicyItemExtended.attributeTypeMap;
    };
    LicensePolicyItemExtended.discriminator = undefined;
    LicensePolicyItemExtended.attributeTypeMap = [
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "limitHourly",
            "baseName": "limit_hourly",
            "type": "number"
        },
        {
            "name": "limitDaily",
            "baseName": "limit_daily",
            "type": "number"
        },
        {
            "name": "limitMonthly",
            "baseName": "limit_monthly",
            "type": "number"
        },
        {
            "name": "creationDate",
            "baseName": "creation_date",
            "type": "Date"
        },
        {
            "name": "extensionPeriod",
            "baseName": "extension_period",
            "type": "number"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        }
    ];
    return LicensePolicyItemExtended;
}());
exports.LicensePolicyItemExtended = LicensePolicyItemExtended;
var enumsMap = {
    "AccountLicenseItem.StatusEnum": AccountLicenseItem.StatusEnum,
    "Application.DataManagedByEnum": Application.DataManagedByEnum,
    "Application.CollectionModeEnum": Application.CollectionModeEnum,
    "ApplicationItem.DataManagedByEnum": ApplicationItem.DataManagedByEnum,
    "ApplicationItem.CollectionModeEnum": ApplicationItem.CollectionModeEnum,
    "ApplicationItemExtended.DataManagedByEnum": ApplicationItemExtended.DataManagedByEnum,
    "ApplicationItemExtended.CollectionModeEnum": ApplicationItemExtended.CollectionModeEnum,
    "DeviceApplication.DataManagedByEnum": DeviceApplication.DataManagedByEnum,
    "DeviceApplication.CollectionModeEnum": DeviceApplication.CollectionModeEnum,
};
var typeMap = {
    "AccessTokenResponse": AccessTokenResponse,
    "Account": Account,
    "AccountDetail": AccountDetail,
    "AccountDevicesCount": AccountDevicesCount,
    "AccountLicenseItem": AccountLicenseItem,
    "AccountListItem": AccountListItem,
    "AccountUserDetail": AccountUserDetail,
    "AccountUserListItem": AccountUserListItem,
    "Accounts": Accounts,
    "Application": Application,
    "ApplicationId": ApplicationId,
    "ApplicationList": ApplicationList,
    "ApplicationUuid": ApplicationUuid,
    "CountryCode": CountryCode,
    "CustomerVdcEndpoint": CustomerVdcEndpoint,
    "Device": Device,
    "DeviceJob": DeviceJob,
    "DeviceJobAction": DeviceJobAction,
    "DeviceSerialNumberList": DeviceSerialNumberList,
    "DeviceSet": DeviceSet,
    "DeviceSetList": DeviceSetList,
    "DeviceSetPatch": DeviceSetPatch,
    "DeviceSetPostRequestData": DeviceSetPostRequestData,
    "DeviceTypeDetail": DeviceTypeDetail,
    "DeviceTypeRevisions": DeviceTypeRevisions,
    "DeviceTypes": DeviceTypes,
    "DeviceVehicleAssignmentHistory": DeviceVehicleAssignmentHistory,
    "DeviceWithTypeDetails": DeviceWithTypeDetails,
    "DocumentLocation": DocumentLocation,
    "ETag": ETag,
    "Empty": Empty,
    "EncryptionKey": EncryptionKey,
    "EncryptionKeyList": EncryptionKeyList,
    "EncryptionKeySet": EncryptionKeySet,
    "ExtendLicenseFailedResponse": ExtendLicenseFailedResponse,
    "FirmwareCompatibilityDetail": FirmwareCompatibilityDetail,
    "FirmwareCompatibilityList": FirmwareCompatibilityList,
    "FirmwareDetail": FirmwareDetail,
    "FirmwareHistory": FirmwareHistory,
    "FirmwareList": FirmwareList,
    "FirmwareReference": FirmwareReference,
    "FirmwareTypeEnum": FirmwareTypeEnum,
    "FirmwareTypeList": FirmwareTypeList,
    "FirmwareVersion": FirmwareVersion,
    "FirmwareVersionList": FirmwareVersionList,
    "JwksKeys": JwksKeys,
    "JwksTokenResponse": JwksTokenResponse,
    "LicenseItem": LicenseItem,
    "LicenseListItem": LicenseListItem,
    "LicensePolicy": LicensePolicy,
    "LicensePolicyId": LicensePolicyId,
    "LogFile": LogFile,
    "LogFileContent": LogFileContent,
    "LogLevel": LogLevel,
    "MobileSdkArtifactLocation": MobileSdkArtifactLocation,
    "MobileSdkDetail": MobileSdkDetail,
    "MobileSdkList": MobileSdkList,
    "MobileSdkReference": MobileSdkReference,
    "MobileSdkTypeEnum": MobileSdkTypeEnum,
    "MobileSdkTypeList": MobileSdkTypeList,
    "ModelError": ModelError,
    "ParameterSchedule": ParameterSchedule,
    "PasswordChangeRequest": PasswordChangeRequest,
    "PasswordItem": PasswordItem,
    "ResetDeviceBindingRequest": ResetDeviceBindingRequest,
    "Roles": Roles,
    "SamplingParameter": SamplingParameter,
    "SystemInformationResponse": SystemInformationResponse,
    "TransmissionSchedule": TransmissionSchedule,
    "UserAccount": UserAccount,
    "UserAccountList": UserAccountList,
    "UserDetailBase": UserDetailBase,
    "UserListItem": UserListItem,
    "UserLockState": UserLockState,
    "UserOwnDetails": UserOwnDetails,
    "VehicleDetail": VehicleDetail,
    "VehicleEcuList": VehicleEcuList,
    "VehicleList": VehicleList,
    "VehicleListItem": VehicleListItem,
    "ApplicationItem": ApplicationItem,
    "ApplicationItemExtended": ApplicationItemExtended,
    "DeviceApplication": DeviceApplication,
    "DeviceExtended": DeviceExtended,
    "FirmwareCompatibilityDetailExtended": FirmwareCompatibilityDetailExtended,
    "LicensePolicyItem": LicensePolicyItem,
    "LicensePolicyLicensesExpiringSoon": LicensePolicyLicensesExpiringSoon,
    "UserDetail": UserDetail,
    "UserDetailExtended": UserDetailExtended,
    "LicensePolicyItemExtended": LicensePolicyItemExtended,
};
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = /** @class */ (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var APUApiApiKeys;
(function (APUApiApiKeys) {
    APUApiApiKeys[APUApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(APUApiApiKeys = exports.APUApiApiKeys || (exports.APUApiApiKeys = {}));
var APUApi = /** @class */ (function () {
    function APUApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(APUApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APUApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    APUApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    APUApi.prototype.setApiKey = function (key, value) {
        this.authentications[APUApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(APUApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APUApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APUApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a new jwks token.
     * @summary Get Jwks token
     */
    APUApi.prototype.getJwks = function () {
        var localVarPath = this.basePath + '/.well-known/jwks.json';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "JwksTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return APUApi;
}());
exports.APUApi = APUApi;
var AccountApiApiKeys;
(function (AccountApiApiKeys) {
    AccountApiApiKeys[AccountApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(AccountApiApiKeys = exports.AccountApiApiKeys || (exports.AccountApiApiKeys = {}));
var AccountApi = /** @class */ (function () {
    function AccountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AccountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AccountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AccountApi.prototype.setApiKey = function (key, value) {
        this.authentications[AccountApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AccountApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates the given account
     * @summary Create account
     * @param account Account object
     */
    AccountApi.prototype.createAccount = function (account) {
        var localVarPath = this.basePath + '/management/accounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling createAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(account, "AccountDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the account with the given account id
     * @summary Delete account
     * @param account Account id
     */
    AccountApi.prototype.deleteAccount = function (account) {
        var localVarPath = this.basePath + '/management/accounts/{account}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling deleteAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the account for the given account id
     * @summary Get account
     * @param account Account id
     */
    AccountApi.prototype.getAccount = function (account) {
        var localVarPath = this.basePath + '/management/accounts/{account}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get accounts
     * @summary Get a list of accounts
     */
    AccountApi.prototype.getAccounts = function () {
        var localVarPath = this.basePath + '/management/accounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<AccountListItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of accounts for the current user
     * @summary Get user account list
     * @param username User name of the user.
     */
    AccountApi.prototype.getAccountsForUser = function (username) {
        var localVarPath = this.basePath + '/users/{username}/accounts'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getAccountsForUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserAccountList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the account for the given id
     * @summary Get account
     * @param account Account id
     */
    AccountApi.prototype.getScopedAccount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of devices for the given account id
     * @summary List of devices for an account
     * @param account Account id
     * @param deviceType Device type assigned to the devices.
     * @param serialNo Serial number of the device. It can also be partial serial number. In case of partial serial number, all the devices whose serial number contain this partial serial number will be returned. A maximum of 100 devices will be returned. If the search result is more than 100 then no device would be returned insteasd an error message will be shown to user.
     */
    AccountApi.prototype.getScopedDevices = function (account, deviceType, serialNo) {
        var localVarPath = this.basePath + '/accounts/{account}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevices.');
        }
        if (deviceType !== undefined) {
            localVarQueryParameters['device_type'] = ObjectSerializer.serialize(deviceType, "string");
        }
        if (serialNo !== undefined) {
            localVarQueryParameters['serial_no'] = ObjectSerializer.serialize(serialNo, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the count of all devices and devices per device type for the given account id
     * @summary Count of devices for an account
     * @param account Account id
     */
    AccountApi.prototype.getScopedDevicesCount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/count'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevicesCount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountDevicesCount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get user with the given username
     * @summary Get user for the given account id and username
     * @param account Account id
     * @param username Username of the user
     */
    AccountApi.prototype.getScopedUserDetail = function (account, username) {
        var localVarPath = this.basePath + '/accounts/{account}/users/{username}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedUserDetail.');
        }
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getScopedUserDetail.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountUserDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of users for the given account id
     * @summary Get users for the given account id
     * @param account Account id
     */
    AccountApi.prototype.getScopedUsers = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/users'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedUsers.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<AccountUserListItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Updates the account with the given account id
     * @summary Update account
     * @param account Account id
     * @param account2 Account object
     */
    AccountApi.prototype.updateAccount = function (account, account2) {
        var localVarPath = this.basePath + '/management/accounts/{account}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling updateAccount.');
        }
        // verify required parameter 'account2' is not null or undefined
        if (account2 === null || account2 === undefined) {
            throw new Error('Required parameter account2 was null or undefined when calling updateAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(account2, "AccountDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AccountApi;
}());
exports.AccountApi = AccountApi;
var ApplicationApiApiKeys;
(function (ApplicationApiApiKeys) {
    ApplicationApiApiKeys[ApplicationApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(ApplicationApiApiKeys = exports.ApplicationApiApiKeys || (exports.ApplicationApiApiKeys = {}));
var ApplicationApi = /** @class */ (function () {
    function ApplicationApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ApplicationApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ApplicationApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ApplicationApi.prototype.setApiKey = function (key, value) {
        this.authentications[ApplicationApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(ApplicationApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create a new application. Will return the created object including the generated application uuid. The license policy id of the given application must be set to an existing id
     * @summary Create a new application
     * @param account Account id
     * @param application Application object
     */
    ApplicationApi.prototype.addApplication = function (account, application) {
        var localVarPath = this.basePath + '/accounts/{account}/applications'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling addApplication.');
        }
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling addApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(application, "Application")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ApplicationItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Assigns the application with the given uuid to the given license policy.
     * @summary Update application
     * @param account Account id
     * @param uuid Application uuid
     * @param policyId LicensePolicyId object
     */
    ApplicationApi.prototype.assignApplicationPolicyByUUID = function (account, uuid, policyId) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}/policy'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling assignApplicationPolicyByUUID.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling assignApplicationPolicyByUUID.');
        }
        // verify required parameter 'policyId' is not null or undefined
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling assignApplicationPolicyByUUID.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(policyId, "LicensePolicyId")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Assigns the device with the given unique serial number to the application with the given uuid.
     * @summary Assign device to application
     * @param serialNumber Device unique serial number
     * @param uuid Application uuid
     * @param bindingReference Reference for the binding process
     */
    ApplicationApi.prototype.assignDeviceToApplication = function (serialNumber, uuid, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications/{uuid}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling assignDeviceToApplication.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling assignDeviceToApplication.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get an application object for the given account id and application uuid
     * @summary get application
     * @param account Account id
     * @param uuid Application uuid
     */
    ApplicationApi.prototype.getApplicationByUUID = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getApplicationByUUID.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getApplicationByUUID.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ApplicationItemExtended");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of applications
     * @summary Get a list of applications
     */
    ApplicationApi.prototype.getApplications = function () {
        var localVarPath = this.basePath + '/management/applications';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ApplicationList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of applications for this account
     * @summary Get applications
     * @param account Account id
     */
    ApplicationApi.prototype.getApplicationsForAccount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/applications'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getApplicationsForAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ApplicationItemExtended>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns a list of applications in the device's account
     * @summary Get a list of applications
     * @param serialNumber Device unique serial number
     */
    ApplicationApi.prototype.getApplicationsForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getApplicationsForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ApplicationItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get application currently assigned to the device and a hash (eTag) to check for changes within the application. This resource is only meant to be used by other services.
     * @summary Get application assigned to the device including an eTag checksum.
     * @param serialNumber Device unique serial number
     */
    ApplicationApi.prototype.getCurrentApplicationByDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/applications/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentApplicationByDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceApplication");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get application currently assigned to the device and a hash (eTag) to check for changes within the application.
     * @summary Get application assigned to the device including an eTag checksum.
     * @param serialNumber Device unique serial number
     */
    ApplicationApi.prototype.getDeviceApplication = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceApplication");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all devices assigned to the given application uuid
     * @summary Get a list of devices assigned to application
     * @param uuid Application uuid to which the devices are assigned to
     */
    ApplicationApi.prototype.getDevicesByApplication = function (uuid) {
        var localVarPath = this.basePath + '/management/applications/{uuid}/devices'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getDevicesByApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all devices assigned to the given application uuid
     * @summary Get a list of devices assigned to application
     * @param account Customer association (account id)
     * @param uuid Application uuid to which the devices are assigned to
     */
    ApplicationApi.prototype.getScopedDevicesByApplication = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevicesByApplication.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getScopedDevicesByApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ApplicationApi;
}());
exports.ApplicationApi = ApplicationApi;
var AuthApiApiKeys;
(function (AuthApiApiKeys) {
    AuthApiApiKeys[AuthApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(AuthApiApiKeys = exports.AuthApiApiKeys || (exports.AuthApiApiKeys = {}));
var AuthApi = /** @class */ (function () {
    function AuthApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AuthApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AuthApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AuthApi.prototype.setApiKey = function (key, value) {
        this.authentications[AuthApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AuthApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns an APS token for a service authenticated with form parameter auth.
     * @summary Get aps token
     */
    AuthApi.prototype.getApsToken = function () {
        var localVarPath = this.basePath + '/lsc/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Basic.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccessTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns an APS token for a service authenticated with basic auth.
     * @summary Get aps token
     */
    AuthApi.prototype.getApsTokenWithGet = function () {
        var localVarPath = this.basePath + '/lsc/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Basic.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccessTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns a token for a user authenticated with basic auth. Either the username or the email address can be used (only if the email address is unique in the users list).
     * @summary Get token
     */
    AuthApi.prototype.getToken = function () {
        var localVarPath = this.basePath + '/auth/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.Basic.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccessTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Test if a token is valid and passes the custom Authorizer.
     * @summary Check a token
     */
    AuthApi.prototype.isTokenAuthorized = function () {
        var localVarPath = this.basePath + '/auth/is_token_authorized';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns a new token for an already authenticated user.
     * @summary Refresh a token
     */
    AuthApi.prototype.refreshToken = function () {
        var localVarPath = this.basePath + '/auth/refresh';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccessTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AuthApi;
}());
exports.AuthApi = AuthApi;
var CORSApiApiKeys;
(function (CORSApiApiKeys) {
    CORSApiApiKeys[CORSApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(CORSApiApiKeys = exports.CORSApiApiKeys || (exports.CORSApiApiKeys = {}));
var CORSApi = /** @class */ (function () {
    function CORSApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CORSApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CORSApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CORSApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CORSApi.prototype.setApiKey = function (key, value) {
        this.authentications[CORSApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(CORSApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CORSApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CORSApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountApplicationsOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/applications'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountApplicationsOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Customer association (account id)
     * @param uuid Application uuid to which the devices are assigned to
     */
    CORSApi.prototype.accountsAccountApplicationsUuidDevicesOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountApplicationsUuidDevicesOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountApplicationsUuidDevicesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param uuid Application uuid
     */
    CORSApi.prototype.accountsAccountApplicationsUuidOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountApplicationsUuidOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountApplicationsUuidOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param uuid Application uuid
     */
    CORSApi.prototype.accountsAccountApplicationsUuidPolicyOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}/policy'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountApplicationsUuidPolicyOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountApplicationsUuidPolicyOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountDevicesCountOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/count'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountDevicesCountOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountDevicesOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountDevicesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.accountsAccountDevicesSerialNumberOptions = function (account, serialNumber) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/{serial_number}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountDevicesSerialNumberOptions.');
        }
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling accountsAccountDevicesSerialNumberOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Customer association (account id)
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.accountsAccountDevicesSerialNumberTypeOptions = function (account, serialNumber) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/{serial_number}/type'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountDevicesSerialNumberTypeOptions.');
        }
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling accountsAccountDevicesSerialNumberTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountLicensesExtendExpirationDateOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/licenses/extend_expiration_date'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountLicensesExtendExpirationDateOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountLicensesOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/licenses'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountLicensesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountPoliciesLicensesExpiringSoonOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/licenses_expiring_soon'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountPoliciesLicensesExpiringSoonOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountPoliciesOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/policies'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountPoliciesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param uuid License policy uuid
     */
    CORSApi.prototype.accountsAccountPoliciesUuidDocumentDownloadOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}/document_download'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountPoliciesUuidDocumentDownloadOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountPoliciesUuidDocumentDownloadOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param uuid License policy uuid
     */
    CORSApi.prototype.accountsAccountPoliciesUuidDocumentUploadOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}/document_upload'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountPoliciesUuidDocumentUploadOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountPoliciesUuidDocumentUploadOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param uuid License policy uuid
     */
    CORSApi.prototype.accountsAccountPoliciesUuidLicensesExtendExpirationDateOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}/licenses/extend_expiration_date'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountPoliciesUuidLicensesExtendExpirationDateOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountPoliciesUuidLicensesExtendExpirationDateOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param uuid License policy uuid
     */
    CORSApi.prototype.accountsAccountPoliciesUuidOptions = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountPoliciesUuidOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling accountsAccountPoliciesUuidOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.accountsAccountUsersOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/users'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountUsersOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param username Username of the user
     */
    CORSApi.prototype.accountsAccountUsersUsernameOptions = function (account, username) {
        var localVarPath = this.basePath + '/accounts/{account}/users/{username}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountUsersUsernameOptions.');
        }
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling accountsAccountUsersUsernameOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Customer association (account id)
     */
    CORSApi.prototype.accountsAccountVehiclesOptions = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountVehiclesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     * @param vin Unique VIN of the vehicle
     */
    CORSApi.prototype.accountsAccountVehiclesVinDevicesOptions = function (account, vin) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountVehiclesVinDevicesOptions.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling accountsAccountVehiclesVinDevicesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Customer association (account id)
     * @param vin Unique VIN of the vehicle
     */
    CORSApi.prototype.accountsAccountVehiclesVinOptions = function (account, vin) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsAccountVehiclesVinOptions.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling accountsAccountVehiclesVinOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.authIsTokenAuthorizedOptions = function () {
        var localVarPath = this.basePath + '/auth/is_token_authorized';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.authRefreshOptions = function () {
        var localVarPath = this.basePath + '/auth/refresh';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.authTokenOptions = function () {
        var localVarPath = this.basePath + '/auth/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.countriesOptions = function () {
        var localVarPath = this.basePath + '/countries';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberApplicationsCurrentOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberApplicationsCurrentOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberApplicationsOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberApplicationsOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     * @param uuid Application uuid
     */
    CORSApi.prototype.devicesSerialNumberApplicationsUuidOptions = function (serialNumber, uuid) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications/{uuid}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberApplicationsUuidOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling devicesSerialNumberApplicationsUuidOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Serial number of the device
     */
    CORSApi.prototype.devicesSerialNumberFirmwareLatestOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/firmware/latest'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberFirmwareLatestOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberFirmwareOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/firmware'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberFirmwareOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberLicensesCurrentOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/licenses/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberLicensesCurrentOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberLicensesOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/licenses'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberLicensesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberLogUploadOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/log_upload'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberLogUploadOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberLoglevelOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/loglevel'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberLoglevelOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberPoliciesOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/policies'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberPoliciesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     * @param uuid License policy uuid
     */
    CORSApi.prototype.devicesSerialNumberPoliciesUuidOptions = function (serialNumber, uuid) {
        var localVarPath = this.basePath + '/devices/{serial_number}/policies/{uuid}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberPoliciesUuidOptions.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling devicesSerialNumberPoliciesUuidOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberVehiclesCurrentEcusOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current/ecus'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberVehiclesCurrentEcusOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberVehiclesCurrentOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberVehiclesCurrentOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.devicesSerialNumberVehiclesOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling devicesSerialNumberVehiclesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.lscTokenOptions = function () {
        var localVarPath = this.basePath + '/lsc/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param account Account id
     */
    CORSApi.prototype.managementAccountsAccountOptions = function (account) {
        var localVarPath = this.basePath + '/management/accounts/{account}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling managementAccountsAccountOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementAccountsOptions = function () {
        var localVarPath = this.basePath + '/management/accounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementApplicationsOptions = function () {
        var localVarPath = this.basePath + '/management/applications';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param uuid Application uuid to which the devices are assigned to
     */
    CORSApi.prototype.managementApplicationsUuidDevicesOptions = function (uuid) {
        var localVarPath = this.basePath + '/management/applications/{uuid}/devices'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling managementApplicationsUuidDevicesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementDevicesJobsOptions = function () {
        var localVarPath = this.basePath + '/management/devices/jobs';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementDevicesOptions = function () {
        var localVarPath = this.basePath + '/management/devices';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberApplicationsCurrentOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/applications/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberApplicationsCurrentOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber unique serial number for this Device.
     */
    CORSApi.prototype.managementDevicesSerialNumberFirmwareHistoryOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/firmware/history'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberFirmwareHistoryOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberKeysOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/keys'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberKeysOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     * @param purpose Key purpose
     */
    CORSApi.prototype.managementDevicesSerialNumberKeysPurposeOptions = function (serialNumber, purpose) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/keys/{purpose}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'purpose' + '}', encodeURIComponent(String(purpose)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberKeysPurposeOptions.');
        }
        // verify required parameter 'purpose' is not null or undefined
        if (purpose === null || purpose === undefined) {
            throw new Error('Required parameter purpose was null or undefined when calling managementDevicesSerialNumberKeysPurposeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     * @param logfile Name of the log file.
     */
    CORSApi.prototype.managementDevicesSerialNumberLogDownloadLogfileOptions = function (serialNumber, logfile) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/log_download/{logfile}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'logfile' + '}', encodeURIComponent(String(logfile)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberLogDownloadLogfileOptions.');
        }
        // verify required parameter 'logfile' is not null or undefined
        if (logfile === null || logfile === undefined) {
            throw new Error('Required parameter logfile was null or undefined when calling managementDevicesSerialNumberLogDownloadLogfileOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberLogDownloadOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/log_download'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberLogDownloadOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberLoglevelOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/loglevel'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberLoglevelOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberPermissionsOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/permissions'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberPermissionsOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberPolicyOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/policy'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberPolicyOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param serialNumber Device unique serial number
     */
    CORSApi.prototype.managementDevicesSerialNumberVehicleAssignmentHistoryOptions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/vehicle_assignment_history'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling managementDevicesSerialNumberVehicleAssignmentHistoryOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementDevicesTypesOptions = function () {
        var localVarPath = this.basePath + '/management/devices/types';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Device type for the given account id
     */
    CORSApi.prototype.managementDevicesTypesTypeOptions = function (type) {
        var localVarPath = this.basePath + '/management/devices/types/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementDevicesTypesTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type of the given device type
     * @param revision Revision of the given device type
     */
    CORSApi.prototype.managementDevicesTypesTypeRevisionFirmwareOptions = function (type, revision) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}/firmware'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementDevicesTypesTypeRevisionFirmwareOptions.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling managementDevicesTypesTypeRevisionFirmwareOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type of the given device type
     * @param revision Revision of the given device type
     * @param version Version of the mapping
     */
    CORSApi.prototype.managementDevicesTypesTypeRevisionFirmwareVersionOptions = function (type, revision, version) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}/firmware/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementDevicesTypesTypeRevisionFirmwareVersionOptions.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling managementDevicesTypesTypeRevisionFirmwareVersionOptions.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling managementDevicesTypesTypeRevisionFirmwareVersionOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type for the given device type.
     * @param revision Revision for the given device type.
     */
    CORSApi.prototype.managementDevicesTypesTypeRevisionOptions = function (type, revision) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementDevicesTypesTypeRevisionOptions.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling managementDevicesTypesTypeRevisionOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementFirmwareOptions = function () {
        var localVarPath = this.basePath + '/management/firmware';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type for the given device type
     */
    CORSApi.prototype.managementFirmwareTypeOptions = function (type) {
        var localVarPath = this.basePath + '/management/firmware/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementFirmwareTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type of the firmware
     * @param version Version of the firmware
     */
    CORSApi.prototype.managementFirmwareTypeVersionOptions = function (type, version) {
        var localVarPath = this.basePath + '/management/firmware/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementFirmwareTypeVersionOptions.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling managementFirmwareTypeVersionOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementFirmwareTypesOptions = function () {
        var localVarPath = this.basePath + '/management/firmware_types';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementKeysOptions = function () {
        var localVarPath = this.basePath + '/management/keys';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementLicensesOptions = function () {
        var localVarPath = this.basePath + '/management/licenses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type for this mobile sdk
     */
    CORSApi.prototype.managementMobileSdkLatestTypeOptions = function (type) {
        var localVarPath = this.basePath + '/management/mobile_sdk/latest/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementMobileSdkLatestTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementMobileSdkOptions = function () {
        var localVarPath = this.basePath + '/management/mobile_sdk';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type for this mobile sdk
     */
    CORSApi.prototype.managementMobileSdkTypeOptions = function (type) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementMobileSdkTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type of the mobile sdk.
     * @param version Version of the mobile sdk
     */
    CORSApi.prototype.managementMobileSdkTypeVersionArtifactUploadOptions = function (type, version) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}/{version}/artifact_upload'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementMobileSdkTypeVersionArtifactUploadOptions.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling managementMobileSdkTypeVersionArtifactUploadOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type of the mobile sdk
     * @param version Version of the mobile sdk
     */
    CORSApi.prototype.managementMobileSdkTypeVersionOptions = function (type, version) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling managementMobileSdkTypeVersionOptions.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling managementMobileSdkTypeVersionOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementMobileSdkTypesOptions = function () {
        var localVarPath = this.basePath + '/management/mobile_sdk_types';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementPoliciesOptions = function () {
        var localVarPath = this.basePath + '/management/policies';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementRolesOptions = function () {
        var localVarPath = this.basePath + '/management/roles';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementSetsOptions = function () {
        var localVarPath = this.basePath + '/management/sets';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param uuid Device set uuid
     */
    CORSApi.prototype.managementSetsUuidDevicesOptions = function (uuid) {
        var localVarPath = this.basePath + '/management/sets/{uuid}/devices'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling managementSetsUuidDevicesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param uuid Device set uuid
     */
    CORSApi.prototype.managementSetsUuidOptions = function (uuid) {
        var localVarPath = this.basePath + '/management/sets/{uuid}'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling managementSetsUuidOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.managementUsersOptions = function () {
        var localVarPath = this.basePath + '/management/users';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user.
     */
    CORSApi.prototype.managementUsersUsernameAccountsOptions = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}/accounts'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling managementUsersUsernameAccountsOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user
     */
    CORSApi.prototype.managementUsersUsernameLockOptions = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}/lock'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling managementUsersUsernameLockOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user
     */
    CORSApi.prototype.managementUsersUsernameOptions = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling managementUsersUsernameOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user
     */
    CORSApi.prototype.managementUsersUsernamePasswordOptions = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}/password'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling managementUsersUsernamePasswordOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user.
     */
    CORSApi.prototype.managementUsersUsernameRolesOptions = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}/roles'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling managementUsersUsernameRolesOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type for this mobile sdk
     */
    CORSApi.prototype.mobileSdkLatestTypeOptions = function (type) {
        var localVarPath = this.basePath + '/mobile_sdk/latest/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling mobileSdkLatestTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.mobileSdkOptions = function () {
        var localVarPath = this.basePath + '/mobile_sdk';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type for this mobile sdk
     */
    CORSApi.prototype.mobileSdkTypeOptions = function (type) {
        var localVarPath = this.basePath + '/mobile_sdk/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling mobileSdkTypeOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param type Type of the mobile sdk
     * @param version Version of the mobile sdk
     */
    CORSApi.prototype.mobileSdkTypeVersionOptions = function (type, version) {
        var localVarPath = this.basePath + '/mobile_sdk/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling mobileSdkTypeVersionOptions.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mobileSdkTypeVersionOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.systemInfoOptions = function () {
        var localVarPath = this.basePath + '/system/info';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.testingResetDeviceBindingOptions = function () {
        var localVarPath = this.basePath + '/testing/reset_device_binding';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user.
     */
    CORSApi.prototype.usersUsernameAccountsOptions = function (username) {
        var localVarPath = this.basePath + '/users/{username}/accounts'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling usersUsernameAccountsOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name the the user.
     */
    CORSApi.prototype.usersUsernameOptions = function (username) {
        var localVarPath = this.basePath + '/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling usersUsernameOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     * @param username User name of the user.
     */
    CORSApi.prototype.usersUsernamePasswordOptions = function (username) {
        var localVarPath = this.basePath + '/users/{username}/password'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling usersUsernamePasswordOptions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * CORS support
     */
    CORSApi.prototype.wellKnownJwksJsonOptions = function () {
        var localVarPath = this.basePath + '/.well-known/jwks.json';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CORSApi;
}());
exports.CORSApi = CORSApi;
var CountApiApiKeys;
(function (CountApiApiKeys) {
    CountApiApiKeys[CountApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(CountApiApiKeys = exports.CountApiApiKeys || (exports.CountApiApiKeys = {}));
var CountApi = /** @class */ (function () {
    function CountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CountApi.prototype.setApiKey = function (key, value) {
        this.authentications[CountApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(CountApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the count of all devices and devices per device type for the given account id
     * @summary Count of devices for an account
     * @param account Account id
     */
    CountApi.prototype.getScopedDevicesCount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/count'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevicesCount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountDevicesCount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CountApi;
}());
exports.CountApi = CountApi;
var DeviceApiApiKeys;
(function (DeviceApiApiKeys) {
    DeviceApiApiKeys[DeviceApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(DeviceApiApiKeys = exports.DeviceApiApiKeys || (exports.DeviceApiApiKeys = {}));
var DeviceApi = /** @class */ (function () {
    function DeviceApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DeviceApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    DeviceApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    DeviceApi.prototype.setApiKey = function (key, value) {
        this.authentications[DeviceApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(DeviceApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Stores information about firmware  for this type and version with the given firmware.
     * @summary store firmware  information
     * @param type Type of the firmware
     * @param version Version of the firmware
     * @param detail Firmware object
     */
    DeviceApi.prototype.addFirmware = function (type, version, detail) {
        var localVarPath = this.basePath + '/management/firmware/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addFirmware.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling addFirmware.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling addFirmware.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "FirmwareDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create or update information about firmware compatibility for this device type and revision with the given firmware version.
     * @summary Create or update firmware compatibility information
     * @param type Type of the given device type
     * @param revision Revision of the given device type
     * @param version Version of the mapping
     * @param detail Firmware compatibility object
     */
    DeviceApi.prototype.addFirmwareCompatibility = function (type, revision, version, detail) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}/firmware/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addFirmwareCompatibility.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling addFirmwareCompatibility.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling addFirmwareCompatibility.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling addFirmwareCompatibility.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "FirmwareCompatibilityDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Assigns the device with the given unique serial number to the application with the given uuid.
     * @summary Assign device to application
     * @param serialNumber Device unique serial number
     * @param uuid Application uuid
     * @param bindingReference Reference for the binding process
     */
    DeviceApi.prototype.assignDeviceToApplication = function (serialNumber, uuid, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications/{uuid}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling assignDeviceToApplication.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling assignDeviceToApplication.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create new device set
     * @summary Create device set
     * @param requestData The required data for creating a device set and assigning devices to it
     */
    DeviceApi.prototype.createDeviceSet = function (requestData) {
        var localVarPath = this.basePath + '/management/sets';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'requestData' is not null or undefined
        if (requestData === null || requestData === undefined) {
            throw new Error('Required parameter requestData was null or undefined when calling createDeviceSet.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestData, "DeviceSetPostRequestData")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceSet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates and activates a license for the given device. NOTE! \"application\":\"string\" field is DEPRECATED
     * @summary Create license for device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.createLicenseForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/licenses'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling createLicenseForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicenseItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates a vehicle record, assigns it to the device with the given unique serial number. If the vehicle record already exists, the record is updated.
     * @summary Create or update vehicle and assign it to device
     * @param serialNumber Device unique serial number
     * @param detail Vehicle object
     * @param bindingReference Reference for the binding process
     */
    DeviceApi.prototype.createVehicleForDevice = function (serialNumber, detail, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling createVehicleForDevice.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling createVehicleForDevice.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "VehicleDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the device with the given unique serial number
     * @summary Delete device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.deleteDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling deleteDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the device set with the given uuid
     * @summary Delete device set
     * @param uuid Device set uuid
     */
    DeviceApi.prototype.deleteDeviceSet = function (uuid) {
        var localVarPath = this.basePath + '/management/sets/{uuid}'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling deleteDeviceSet.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the device type with the given type and revision
     * @summary Delete device type
     * @param type Type for the given device type.
     * @param revision Revision for the given device type.
     */
    DeviceApi.prototype.deleteDeviceType = function (type, revision) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteDeviceType.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling deleteDeviceType.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the firmware  information for the given type and version
     * @summary delete firmware  information
     * @param type Type of the firmware
     * @param version Version of the firmware
     */
    DeviceApi.prototype.deleteFirmware = function (type, version) {
        var localVarPath = this.basePath + '/management/firmware/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteFirmware.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteFirmware.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the firmware compatibility information for the given device type revision and firmware version
     * @summary Delete firmware compatibility information
     * @param type Type of the given device type
     * @param revision Revision of the given device type
     * @param version Version of the mapping
     */
    DeviceApi.prototype.deleteFirmwareCompatibility = function (type, revision, version) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}/firmware/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteFirmwareCompatibility.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling deleteFirmwareCompatibility.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteFirmwareCompatibility.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of all log files of a device
     * @summary Get log files of a device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getAllLogFilesForADevice = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/log_download'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getAllLogFilesForADevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LogFile>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns a list of applications in the device's account
     * @summary Get a list of applications
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getApplicationsForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getApplicationsForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ApplicationItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get application currently assigned to the device and a hash (eTag) to check for changes within the application. This resource is only meant to be used by other services.
     * @summary Get application assigned to the device including an eTag checksum.
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getCurrentApplicationByDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/applications/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentApplicationByDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceApplication");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the currently active license policy for the given device
     * @summary Get currently active license policy of the device.
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getCurrentDeviceLicensePolicy = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/policy'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentDeviceLicensePolicy.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Gets the current license for the given device. The license information contains also an authentic token that indicates if the license is active or not. This token is encrypted with the device key for configuration (purpose \"config\"). NOTE! \"application\":\"string\" field is DEPRECATED
     * @summary Get current license for the device
     * @param serialNumber Device unique serial number
     * @param bindingReference Reference for the binding process
     */
    DeviceApi.prototype.getCurrentLicenseForDevice = function (serialNumber, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/licenses/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentLicenseForDevice.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicenseItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the device for the given unique serial number
     * @summary Get Device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceWithTypeDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get application currently assigned to the device and a hash (eTag) to check for changes within the application.
     * @summary Get application assigned to the device including an eTag checksum.
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDeviceApplication = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/applications/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceApplication");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get device for the given unique serial number and the given account id
     * @summary Get device
     * @param account Account id
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDeviceInAccount = function (account, serialNumber) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/{serial_number}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getDeviceInAccount.');
        }
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceInAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceWithTypeDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the encryption keys for the device
     * @summary Get device key for purpose
     * @param serialNumber Device unique serial number
     * @param purpose Key purpose
     * @param format Defines output format of device keys
     */
    DeviceApi.prototype.getDeviceKeyForPurpose = function (serialNumber, purpose, format) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/keys/{purpose}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'purpose' + '}', encodeURIComponent(String(purpose)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceKeyForPurpose.');
        }
        // verify required parameter 'purpose' is not null or undefined
        if (purpose === null || purpose === undefined) {
            throw new Error('Required parameter purpose was null or undefined when calling getDeviceKeyForPurpose.');
        }
        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EncryptionKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the encryption keys for the device
     * @summary Get device keys
     * @param serialNumber Device unique serial number
     * @param format Defines output format of device keys
     */
    DeviceApi.prototype.getDeviceKeys = function (serialNumber, format) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/keys'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceKeys.');
        }
        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<EncryptionKey>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the permissions for the device
     * @summary Get device permissions
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDevicePermissions = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/permissions'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDevicePermissions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a device set for the specified uuid
     * @summary Get a device set
     * @param uuid Device set uuid
     */
    DeviceApi.prototype.getDeviceSet = function (uuid) {
        var localVarPath = this.basePath + '/management/sets/{uuid}'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getDeviceSet.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceSet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the device type for the given type and revision
     * @summary Get device type
     * @param type Type for the given device type.
     * @param revision Revision for the given device type.
     */
    DeviceApi.prototype.getDeviceType = function (type, revision) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getDeviceType.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling getDeviceType.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceTypeDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the device type for the given device.
     * @summary Get device type for device
     * @param account Customer association (account id)
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDeviceTypeForDevice = function (account, serialNumber) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/{serial_number}/type'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getDeviceTypeForDevice.');
        }
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceTypeForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceTypeDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get device types for all revisions of the given device type
     * @summary Get a list of device type revisions
     * @param type Device type for the given account id
     */
    DeviceApi.prototype.getDeviceTypeRevisions = function (type) {
        var localVarPath = this.basePath + '/management/devices/types/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getDeviceTypeRevisions.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceTypeRevisions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available device types
     * @summary Get a list of device types
     */
    DeviceApi.prototype.getDeviceTypes = function () {
        var localVarPath = this.basePath + '/management/devices/types';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceTypes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get an array of vehicles which were at least once assigned to the device with the given unique serial number
     * @summary Get vehicle assignment history for the device.
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDeviceVehicleAssignmentHistory = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/vehicle_assignment_history'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceVehicleAssignmentHistory.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceVehicleAssignmentHistory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get device for the given unique serial number
     * @summary Get device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getDeviceWithDeviceRole = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceWithDeviceRole.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceWithTypeDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get devices
     * @summary Get list of devices
     * @param deviceType Device type assigned to the devices.
     * @param account Account of the devices.
     * @param batchId Batch ID of the devices.
     * @param serialNo Serial number of the device. It can also be partial serial number. In case of partial serial number, all the devices whose serial number contain this partial serial number will be returned. A maximum of 100 devices will be returned. If the search result is more than 100 then no device would be returned insteasd an error message will be shown to user.
     * @param serialFrom Start of range of serial numbers of the devices. Works if the serial numbers are normalized to the same length.
     * @param serialTo End of range of serial numbers of the devices. Works if the serial numbers are normalized to the same length.
     * @param unassigned Value is true for devices not assigned to any account. Any value other than true will be considered as false.
     */
    DeviceApi.prototype.getDevices = function (deviceType, account, batchId, serialNo, serialFrom, serialTo, unassigned) {
        var localVarPath = this.basePath + '/management/devices';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (deviceType !== undefined) {
            localVarQueryParameters['device_type'] = ObjectSerializer.serialize(deviceType, "string");
        }
        if (account !== undefined) {
            localVarQueryParameters['account'] = ObjectSerializer.serialize(account, "string");
        }
        if (batchId !== undefined) {
            localVarQueryParameters['batch_id'] = ObjectSerializer.serialize(batchId, "string");
        }
        if (serialNo !== undefined) {
            localVarQueryParameters['serial_no'] = ObjectSerializer.serialize(serialNo, "string");
        }
        if (serialFrom !== undefined) {
            localVarQueryParameters['serial_from'] = ObjectSerializer.serialize(serialFrom, "string");
        }
        if (serialTo !== undefined) {
            localVarQueryParameters['serial_to'] = ObjectSerializer.serialize(serialTo, "string");
        }
        if (unassigned !== undefined) {
            localVarQueryParameters['unassigned'] = ObjectSerializer.serialize(unassigned, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<DeviceExtended>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all devices assigned to the given application uuid
     * @summary Get a list of devices assigned to application
     * @param uuid Application uuid to which the devices are assigned to
     */
    DeviceApi.prototype.getDevicesByApplication = function (uuid) {
        var localVarPath = this.basePath + '/management/applications/{uuid}/devices'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getDevicesByApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the devices associated to the given device set uuid
     * @summary Get devices associated to device set
     * @param uuid Device set uuid
     */
    DeviceApi.prototype.getDevicesByDeviceSet = function (uuid) {
        var localVarPath = this.basePath + '/management/sets/{uuid}/devices'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getDevicesByDeviceSet.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the devices associated to the given vehicle VIN
     * @summary Get devices associated to vehicle
     * @param account Account id
     * @param vin Unique VIN of the vehicle
     */
    DeviceApi.prototype.getDevicesByVehicle = function (account, vin) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getDevicesByVehicle.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getDevicesByVehicle.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all ECUs for the vehicle that is currently bound to the given device.
     * @summary Get a list of ECUs of vehicle by device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getEcusForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current/ecus'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getEcusForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VehicleEcuList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the firmware object for the given type and version
     * @summary Get firmware
     * @param type Type of the firmware
     * @param version Version of the firmware
     */
    DeviceApi.prototype.getFirmware = function (type, version) {
        var localVarPath = this.basePath + '/management/firmware/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getFirmware.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getFirmware.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available firmware information for the given firmware type.
     * @summary Get a list of firmware  by firmware type
     * @param type Type for the given device type
     */
    DeviceApi.prototype.getFirmwareByType = function (type) {
        var localVarPath = this.basePath + '/management/firmware/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getFirmwareByType.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the firmware compatibility object for this device type, revision, firmware type and version
     * @summary Get firmware compatibility
     * @param type Type of the given device type
     * @param revision Revision of the given device type
     * @param version Version of the mapping
     */
    DeviceApi.prototype.getFirmwareCompatibility = function (type, revision, version) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}/firmware/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getFirmwareCompatibility.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling getFirmwareCompatibility.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getFirmwareCompatibility.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareCompatibilityDetailExtended");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available firmware compatibility information for the given device type revision.
     * @summary Get a list of firmware compatibility by device type revision
     * @param type Type of the given device type
     * @param revision Revision of the given device type
     */
    DeviceApi.prototype.getFirmwareCompatibilityByDeviceTypeRevision = function (type, revision) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}/firmware'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getFirmwareCompatibilityByDeviceTypeRevision.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling getFirmwareCompatibilityByDeviceTypeRevision.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<FirmwareCompatibilityDetailExtended>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the firmware history for one device
     * @summary get firmware history
     * @param serialNumber unique serial number for this Device.
     */
    DeviceApi.prototype.getFirmwareHistoryForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/firmware/history'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getFirmwareHistoryForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareHistory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available firmware information.
     * @summary Get a list of firmwares
     */
    DeviceApi.prototype.getFirmwareList = function () {
        var localVarPath = this.basePath + '/management/firmware';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get valid firmware types .
     * @summary Get a list of firmware types
     */
    DeviceApi.prototype.getFirmwareTypeList = function () {
        var localVarPath = this.basePath + '/management/firmware_types';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareTypeList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get latest available firmware compatible with the given device.
     * @summary Get a list of latest firmware compatible by device
     * @param serialNumber Serial number of the device
     * @param bindingReference Reference for the binding process
     */
    DeviceApi.prototype.getLatestFirmwareByDevice = function (serialNumber, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/firmware/latest'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLatestFirmwareByDevice.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns a list of license policies of the account to which the given device is associated.
     * @summary Get license policies for device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getLicensePoliciesForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/policies'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLicensePoliciesForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LicensePolicyItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns details about a license policy. The license policy must be in the account to which the given device is associated.
     * @summary Get license policy for device
     * @param serialNumber Device unique serial number
     * @param uuid License policy uuid
     */
    DeviceApi.prototype.getLicensePolicyForDevice = function (serialNumber, uuid) {
        var localVarPath = this.basePath + '/devices/{serial_number}/policies/{uuid}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLicensePolicyForDevice.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getLicensePolicyForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get download URL for log files. The URL will be only valid for a duration of 10 minutes.
     * @summary Get download URL for log files
     * @param serialNumber Device unique serial number
     * @param logfile Name of the log file.
     */
    DeviceApi.prototype.getLogFileDownloadUrl = function (serialNumber, logfile) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/log_download/{logfile}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'logfile' + '}', encodeURIComponent(String(logfile)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLogFileDownloadUrl.');
        }
        // verify required parameter 'logfile' is not null or undefined
        if (logfile === null || logfile === undefined) {
            throw new Error('Required parameter logfile was null or undefined when calling getLogFileDownloadUrl.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentLocation");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get upload URL for log files. The URL will be only valid for a duration of 10 minutes. Server-Side-Encryption (SSE) must be enabled via the 'x-amz-server-side-encryption' header. See http://docs.aws.amazon.com/AmazonS3/latest/dev/SSEUsingRESTAPI.html.
     * @summary Get upload URL for log files
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getLogFileUploadUrl = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/log_upload'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLogFileUploadUrl.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentLocation");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get valid mobile sdk types .
     * @summary Get a list of mobile sdk types
     */
    DeviceApi.prototype.getMobileSdkTypeList = function () {
        var localVarPath = this.basePath + '/management/mobile_sdk_types';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkTypeList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of devices for the given account id
     * @summary List of devices for an account
     * @param account Account id
     * @param deviceType Device type assigned to the devices.
     * @param serialNo Serial number of the device. It can also be partial serial number. In case of partial serial number, all the devices whose serial number contain this partial serial number will be returned. A maximum of 100 devices will be returned. If the search result is more than 100 then no device would be returned insteasd an error message will be shown to user.
     */
    DeviceApi.prototype.getScopedDevices = function (account, deviceType, serialNo) {
        var localVarPath = this.basePath + '/accounts/{account}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevices.');
        }
        if (deviceType !== undefined) {
            localVarQueryParameters['device_type'] = ObjectSerializer.serialize(deviceType, "string");
        }
        if (serialNo !== undefined) {
            localVarQueryParameters['serial_no'] = ObjectSerializer.serialize(serialNo, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all devices assigned to the given application uuid
     * @summary Get a list of devices assigned to application
     * @param account Customer association (account id)
     * @param uuid Application uuid to which the devices are assigned to
     */
    DeviceApi.prototype.getScopedDevicesByApplication = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevicesByApplication.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getScopedDevicesByApplication.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the count of all devices and devices per device type for the given account id
     * @summary Count of devices for an account
     * @param account Account id
     */
    DeviceApi.prototype.getScopedDevicesCount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/devices/count'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedDevicesCount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountDevicesCount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the record of the vehicle that is currently bound to the given device unique serial number
     * @summary Get vehicle for device
     * @param serialNumber Device unique serial number
     */
    DeviceApi.prototype.getVehicleForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getVehicleForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VehicleDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * List of device sets
     * @summary Get a list of device sets
     */
    DeviceApi.prototype.listDeviceSets = function () {
        var localVarPath = this.basePath + '/management/sets';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceSetList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Post a job to modify a number of devices
     * @summary Modify a list of devices
     * @param jobRequest DeviceJob to modify a list of devices.
     */
    DeviceApi.prototype.modifyDevices = function (jobRequest) {
        var localVarPath = this.basePath + '/management/devices/jobs';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'jobRequest' is not null or undefined
        if (jobRequest === null || jobRequest === undefined) {
            throw new Error('Required parameter jobRequest was null or undefined when calling modifyDevices.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(jobRequest, "DeviceJob")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<string>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates or updates the device with the given unique serial number
     * @summary Create or update device
     * @param serialNumber Device unique serial number
     * @param device Device object
     */
    DeviceApi.prototype.putDevice = function (serialNumber, device) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling putDevice.');
        }
        // verify required parameter 'device' is not null or undefined
        if (device === null || device === undefined) {
            throw new Error('Required parameter device was null or undefined when calling putDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(device, "Device")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Updates the device type with the given type and revision. If no such device type exists, it is created implicitly.
     * @summary Create or update device type
     * @param type Type for the given device type.
     * @param revision Revision for the given device type.
     * @param deviceType Device type object
     */
    DeviceApi.prototype.putDeviceType = function (type, revision, deviceType) {
        var localVarPath = this.basePath + '/management/devices/types/{type}/{revision}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'revision' + '}', encodeURIComponent(String(revision)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling putDeviceType.');
        }
        // verify required parameter 'revision' is not null or undefined
        if (revision === null || revision === undefined) {
            throw new Error('Required parameter revision was null or undefined when calling putDeviceType.');
        }
        // verify required parameter 'deviceType' is not null or undefined
        if (deviceType === null || deviceType === undefined) {
            throw new Error('Required parameter deviceType was null or undefined when calling putDeviceType.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deviceType, "DeviceTypeDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates or updates the device with the given unique serial number
     * @summary Create or update device
     * @param serialNumber Device unique serial number
     * @param device Device object
     */
    DeviceApi.prototype.putDeviceWithDeviceRole = function (serialNumber, device) {
        var localVarPath = this.basePath + '/devices/{serial_number}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling putDeviceWithDeviceRole.');
        }
        // verify required parameter 'device' is not null or undefined
        if (device === null || device === undefined) {
            throw new Error('Required parameter device was null or undefined when calling putDeviceWithDeviceRole.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(device, "Device")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Put firmware version for the device with the given unique serial number
     * @summary Put firmware version
     * @param serialNumber Device unique serial number
     * @param firmwareVersion FirmwareVersion object
     */
    DeviceApi.prototype.putFirmwareVersionWithDeviceRole = function (serialNumber, firmwareVersion) {
        var localVarPath = this.basePath + '/devices/{serial_number}/firmware'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling putFirmwareVersionWithDeviceRole.');
        }
        // verify required parameter 'firmwareVersion' is not null or undefined
        if (firmwareVersion === null || firmwareVersion === undefined) {
            throw new Error('Required parameter firmwareVersion was null or undefined when calling putFirmwareVersionWithDeviceRole.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(firmwareVersion, "Empty")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "FirmwareVersionList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Put log level for the device with the given unique serial number
     * @summary Put log level
     * @param serialNumber Device unique serial number
     * @param logLevel LogLevel object
     */
    DeviceApi.prototype.putLogLevel = function (serialNumber, logLevel) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/loglevel'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling putLogLevel.');
        }
        // verify required parameter 'logLevel' is not null or undefined
        if (logLevel === null || logLevel === undefined) {
            throw new Error('Required parameter logLevel was null or undefined when calling putLogLevel.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(logLevel, "LogLevel")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Empty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Put log level for the device with the given unique serial number
     * @summary Put log level
     * @param serialNumber Device unique serial number
     * @param logLevel LogLevel object
     */
    DeviceApi.prototype.putLogLevelWithDeviceRole = function (serialNumber, logLevel) {
        var localVarPath = this.basePath + '/devices/{serial_number}/loglevel'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling putLogLevelWithDeviceRole.');
        }
        // verify required parameter 'logLevel' is not null or undefined
        if (logLevel === null || logLevel === undefined) {
            throw new Error('Required parameter logLevel was null or undefined when calling putLogLevelWithDeviceRole.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(logLevel, "LogLevel")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Empty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update device set
     * @summary Update device set
     * @param deviceSetPatch DeviceSetPatch object
     */
    DeviceApi.prototype.updateDeviceSet = function (deviceSetPatch) {
        var localVarPath = this.basePath + '/management/sets';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'deviceSetPatch' is not null or undefined
        if (deviceSetPatch === null || deviceSetPatch === undefined) {
            throw new Error('Required parameter deviceSetPatch was null or undefined when calling updateDeviceSet.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deviceSetPatch, "DeviceSetPatch")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send a log file to the backend. Limitations: - Payload size: 6 MB as maximum
     * @summary Send a log file to the backend
     * @param serialNumber Device unique serial number
     * @param logfileContent The content of the log file to be uploaded (encrypted or decrypted)
     */
    DeviceApi.prototype.uploadLogFile = function (serialNumber, logfileContent) {
        var localVarPath = this.basePath + '/devices/{serial_number}/log_upload'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling uploadLogFile.');
        }
        // verify required parameter 'logfileContent' is not null or undefined
        if (logfileContent === null || logfileContent === undefined) {
            throw new Error('Required parameter logfileContent was null or undefined when calling uploadLogFile.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(logfileContent, "LogFileContent")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return DeviceApi;
}());
exports.DeviceApi = DeviceApi;
var KeysApiApiKeys;
(function (KeysApiApiKeys) {
    KeysApiApiKeys[KeysApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(KeysApiApiKeys = exports.KeysApiApiKeys || (exports.KeysApiApiKeys = {}));
var KeysApi = /** @class */ (function () {
    function KeysApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(KeysApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeysApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    KeysApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    KeysApi.prototype.setApiKey = function (key, value) {
        this.authentications[KeysApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(KeysApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeysApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeysApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the encryption keys for the device
     * @summary Get device key for purpose
     * @param serialNumber Device unique serial number
     * @param purpose Key purpose
     * @param format Defines output format of device keys
     */
    KeysApi.prototype.getDeviceKeyForPurpose = function (serialNumber, purpose, format) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/keys/{purpose}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'purpose' + '}', encodeURIComponent(String(purpose)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceKeyForPurpose.');
        }
        // verify required parameter 'purpose' is not null or undefined
        if (purpose === null || purpose === undefined) {
            throw new Error('Required parameter purpose was null or undefined when calling getDeviceKeyForPurpose.');
        }
        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EncryptionKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the encryption keys for the device
     * @summary Get device keys
     * @param serialNumber Device unique serial number
     * @param format Defines output format of device keys
     */
    KeysApi.prototype.getDeviceKeys = function (serialNumber, format) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/keys'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceKeys.');
        }
        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<EncryptionKey>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create a list of device key sets.
     * @summary Create device keys
     * @param count Count of sets to generate. Default is 1.
     * @param format Defines output format of device keys
     */
    KeysApi.prototype.getKeys = function (count, format) {
        var localVarPath = this.basePath + '/management/keys';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }
        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<EncryptionKeySet>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return KeysApi;
}());
exports.KeysApi = KeysApi;
var LicenseApiApiKeys;
(function (LicenseApiApiKeys) {
    LicenseApiApiKeys[LicenseApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(LicenseApiApiKeys = exports.LicenseApiApiKeys || (exports.LicenseApiApiKeys = {}));
var LicenseApi = /** @class */ (function () {
    function LicenseApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(LicenseApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LicenseApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    LicenseApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    LicenseApi.prototype.setApiKey = function (key, value) {
        this.authentications[LicenseApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(LicenseApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LicenseApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LicenseApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create a new license policy. Will return the created object including the generated license policy uuid.
     * @summary Create a new license policy
     * @param account Account id
     * @param licensePolicy License policy object
     */
    LicenseApi.prototype.addLicensePolicy = function (account, licensePolicy) {
        var localVarPath = this.basePath + '/accounts/{account}/policies'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling addLicensePolicy.');
        }
        // verify required parameter 'licensePolicy' is not null or undefined
        if (licensePolicy === null || licensePolicy === undefined) {
            throw new Error('Required parameter licensePolicy was null or undefined when calling addLicensePolicy.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(licensePolicy, "LicensePolicy")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Assigns the application with the given uuid to the given license policy.
     * @summary Update application
     * @param account Account id
     * @param uuid Application uuid
     * @param policyId LicensePolicyId object
     */
    LicenseApi.prototype.assignApplicationPolicyByUUID = function (account, uuid, policyId) {
        var localVarPath = this.basePath + '/accounts/{account}/applications/{uuid}/policy'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling assignApplicationPolicyByUUID.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling assignApplicationPolicyByUUID.');
        }
        // verify required parameter 'policyId' is not null or undefined
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling assignApplicationPolicyByUUID.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(policyId, "LicensePolicyId")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates and activates a license for the given device. NOTE! \"application\":\"string\" field is DEPRECATED
     * @summary Create license for device
     * @param serialNumber Device unique serial number
     */
    LicenseApi.prototype.createLicenseForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/licenses'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling createLicenseForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicenseItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Extend the expiration date of the supplied list of device serial numbers for the given account id
     * @summary Extend licenses
     * @param account Account id
     * @param deviceSerialNumbers A list of device serial numbers to extend.
     */
    LicenseApi.prototype.extendLicensesByAccount = function (account, deviceSerialNumbers) {
        var localVarPath = this.basePath + '/accounts/{account}/licenses/extend_expiration_date'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling extendLicensesByAccount.');
        }
        // verify required parameter 'deviceSerialNumbers' is not null or undefined
        if (deviceSerialNumbers === null || deviceSerialNumbers === undefined) {
            throw new Error('Required parameter deviceSerialNumbers was null or undefined when calling extendLicensesByAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deviceSerialNumbers, "DeviceSerialNumberList")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<ExtendLicenseFailedResponse>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the currently active license policy for the given device
     * @summary Get currently active license policy of the device.
     * @param serialNumber Device unique serial number
     */
    LicenseApi.prototype.getCurrentDeviceLicensePolicy = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/policy'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentDeviceLicensePolicy.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Gets the current license for the given device. The license information contains also an authentic token that indicates if the license is active or not. This token is encrypted with the device key for configuration (purpose \"config\"). NOTE! \"application\":\"string\" field is DEPRECATED
     * @summary Get current license for the device
     * @param serialNumber Device unique serial number
     * @param bindingReference Reference for the binding process
     */
    LicenseApi.prototype.getCurrentLicenseForDevice = function (serialNumber, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/licenses/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentLicenseForDevice.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicenseItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of license policies
     * @summary Get a list of license policies
     */
    LicenseApi.prototype.getLicensePolicies = function () {
        var localVarPath = this.basePath + '/management/policies';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LicensePolicyItemExtended>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of license policies for the given account id
     * @summary Get license policies
     * @param account Account id
     */
    LicenseApi.prototype.getLicensePoliciesByAccount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/policies'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getLicensePoliciesByAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LicensePolicyItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns a list of license policies of the account to which the given device is associated.
     * @summary Get license policies for device
     * @param serialNumber Device unique serial number
     */
    LicenseApi.prototype.getLicensePoliciesForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/policies'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLicensePoliciesForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LicensePolicyItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the license policy for the given account id and license policy uuid
     * @summary Get license policy
     * @param account Account id
     * @param uuid License policy uuid
     */
    LicenseApi.prototype.getLicensePolicy = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getLicensePolicy.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getLicensePolicy.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the URL where the license policy can be downloaded from. The URL will be only valid for a duration of 10 minutes.
     * @summary Get license policy document download URL
     * @param account Account id
     * @param uuid License policy uuid
     */
    LicenseApi.prototype.getLicensePolicyDocumentDownloadUrl = function (account, uuid) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}/document_download'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getLicensePolicyDocumentDownloadUrl.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getLicensePolicyDocumentDownloadUrl.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentLocation");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the URL where the license policy can be uploaded to. The URL will be only valid for a duration of 10 minutes.
     * @summary Get license policy document upload URL
     * @param account Account id
     * @param uuid License policy uuid
     * @param contentType Content type of the license policy document
     */
    LicenseApi.prototype.getLicensePolicyDocumentUploadUrl = function (account, uuid, contentType) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}/document_upload'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getLicensePolicyDocumentUploadUrl.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getLicensePolicyDocumentUploadUrl.');
        }
        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling getLicensePolicyDocumentUploadUrl.');
        }
        if (contentType !== undefined) {
            localVarQueryParameters['content_type'] = ObjectSerializer.serialize(contentType, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DocumentLocation");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns details about a license policy. The license policy must be in the account to which the given device is associated.
     * @summary Get license policy for device
     * @param serialNumber Device unique serial number
     * @param uuid License policy uuid
     */
    LicenseApi.prototype.getLicensePolicyForDevice = function (serialNumber, uuid) {
        var localVarPath = this.basePath + '/devices/{serial_number}/policies/{uuid}'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getLicensePolicyForDevice.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getLicensePolicyForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of licenses
     * @summary Get a list of licenses
     */
    LicenseApi.prototype.getLicenses = function () {
        var localVarPath = this.basePath + '/management/licenses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LicenseListItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of licenses for the given account id
     * @summary Get licenses
     * @param account Account id
     * @param expirationDateThreshold A date to define a time period to determine soon expiring licenses. The start of the time period is the current date and the end date is the &#x60;expiration_date_threshold&#x60; date. The default &#x60;expiration_date_threshold&#x60; date is the current date plus 7 days.
     */
    LicenseApi.prototype.getLicensesByAccount = function (account, expirationDateThreshold) {
        var localVarPath = this.basePath + '/accounts/{account}/licenses'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getLicensesByAccount.');
        }
        if (expirationDateThreshold !== undefined) {
            localVarQueryParameters['expiration_date_threshold'] = ObjectSerializer.serialize(expirationDateThreshold, "Date");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<AccountLicenseItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return LicenseApi;
}());
exports.LicenseApi = LicenseApi;
var LicensePolicyApiApiKeys;
(function (LicensePolicyApiApiKeys) {
    LicensePolicyApiApiKeys[LicensePolicyApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(LicensePolicyApiApiKeys = exports.LicensePolicyApiApiKeys || (exports.LicensePolicyApiApiKeys = {}));
var LicensePolicyApi = /** @class */ (function () {
    function LicensePolicyApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(LicensePolicyApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LicensePolicyApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    LicensePolicyApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    LicensePolicyApi.prototype.setApiKey = function (key, value) {
        this.authentications[LicensePolicyApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(LicensePolicyApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LicensePolicyApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LicensePolicyApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Extend the expiration date of all licenses of this license policy.
     * @summary Extend licenses of license policy
     * @param account Account id
     * @param uuid License policy uuid
     * @param expirationDateThreshold A date to define a time period to determine soon expiring licenses. The start of the time period is the current date and the end date is the &#x60;expiration_date_threshold&#x60; date. The default &#x60;expiration_date_threshold&#x60; date is the current date plus 7 days.
     */
    LicensePolicyApi.prototype.extendLicensesOfLicensePolicyByUUID = function (account, uuid, expirationDateThreshold) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/{uuid}/licenses/extend_expiration_date'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling extendLicensesOfLicensePolicyByUUID.');
        }
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling extendLicensesOfLicensePolicyByUUID.');
        }
        if (expirationDateThreshold !== undefined) {
            localVarQueryParameters['expiration_date_threshold'] = ObjectSerializer.serialize(expirationDateThreshold, "Date");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the number of soon expiring licenses per license policy
     * @summary Get license policy uuid including numbers of licenses expiring soon
     * @param account Account id
     * @param expirationDateThreshold A date to define a time period to determine soon expiring licenses. The start of the time period is the current date and the end date is the &#x60;expiration_date_threshold&#x60; date. The default &#x60;expiration_date_threshold&#x60; date is the current date plus 7 days.
     */
    LicensePolicyApi.prototype.getLicensesExpiringSoonOfLicensePolicies = function (account, expirationDateThreshold) {
        var localVarPath = this.basePath + '/accounts/{account}/policies/licenses_expiring_soon'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getLicensesExpiringSoonOfLicensePolicies.');
        }
        if (expirationDateThreshold !== undefined) {
            localVarQueryParameters['expiration_date_threshold'] = ObjectSerializer.serialize(expirationDateThreshold, "Date");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<LicensePolicyLicensesExpiringSoon>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return LicensePolicyApi;
}());
exports.LicensePolicyApi = LicensePolicyApi;
var MobileSdkApiApiKeys;
(function (MobileSdkApiApiKeys) {
    MobileSdkApiApiKeys[MobileSdkApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(MobileSdkApiApiKeys = exports.MobileSdkApiApiKeys || (exports.MobileSdkApiApiKeys = {}));
var MobileSdkApi = /** @class */ (function () {
    function MobileSdkApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(MobileSdkApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MobileSdkApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    MobileSdkApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    MobileSdkApi.prototype.setApiKey = function (key, value) {
        this.authentications[MobileSdkApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(MobileSdkApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MobileSdkApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MobileSdkApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create or update information about mobile sdk for the specified type and version with the given mobile sdk.
     * @summary Create or update mobile sdk information
     * @param type Type of the mobile sdk
     * @param version Version of the mobile sdk
     * @param detail Mobile sdk object
     */
    MobileSdkApi.prototype.addMobileSdk = function (type, version, detail) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addMobileSdk.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling addMobileSdk.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling addMobileSdk.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "MobileSdkDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the mobile sdk information for the given type and version
     * @summary Delete mobile sdk information
     * @param type Type of the mobile sdk
     * @param version Version of the mobile sdk
     */
    MobileSdkApi.prototype.deleteMobileSdk = function (type, version) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteMobileSdk.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteMobileSdk.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * NOTE! DEPRECATED please use GET /mobile_sdk/latest/{type}. Get available latest mobile sdk information for the given mobile sdk type.
     * @summary Get the latest mobile sdk by mobile sdk type. NOTE! DEPRECATED
     * @param type Type for this mobile sdk
     */
    MobileSdkApi.prototype.getLatestMobileSdkByType = function (type) {
        var localVarPath = this.basePath + '/management/mobile_sdk/latest/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getLatestMobileSdkByType.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available latest mobile sdk information for the given mobile sdk type without authentication.
     * @summary Get the latest mobile sdk by mobile sdk type.
     * @param type Type for this mobile sdk
     */
    MobileSdkApi.prototype.getLatestMobileSdkByType_1 = function (type) {
        var localVarPath = this.basePath + '/mobile_sdk/latest/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getLatestMobileSdkByType_1.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * NOTE! DEPRECATED please use GET /mobile_sdk/{type}/{version}. Get the mobile sdk object for this type and version.
     * @summary Get mobile sdk detail.NOTE! DEPRECATED
     * @param type Type of the mobile sdk
     * @param version Version of the mobile sdk
     */
    MobileSdkApi.prototype.getMobileSdk = function (type, version) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getMobileSdk.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getMobileSdk.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the URL where the mobile sdk can be uploaded to. The URL will be only valid for a duration of 10 minutes.
     * @summary Get mobile sdk artifact upload URL
     * @param type Type of the mobile sdk.
     * @param version Version of the mobile sdk
     * @param contentType Content type of the mobile sdk artifact
     */
    MobileSdkApi.prototype.getMobileSdkArtifactUploadUrl = function (type, version, contentType) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}/{version}/artifact_upload'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getMobileSdkArtifactUploadUrl.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getMobileSdkArtifactUploadUrl.');
        }
        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling getMobileSdkArtifactUploadUrl.');
        }
        if (contentType !== undefined) {
            localVarQueryParameters['content_type'] = ObjectSerializer.serialize(contentType, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkArtifactLocation");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * NOTE! DEPRECATED please use GET /mobile_sdk/{type}. Get available mobile sdk information for the given mobile sdk type.
     * @summary Get a list of mobile sdk by mobile sdk type. NOTE! DEPRECATED
     * @param type Type for this mobile sdk
     */
    MobileSdkApi.prototype.getMobileSdkByType = function (type) {
        var localVarPath = this.basePath + '/management/mobile_sdk/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getMobileSdkByType.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available mobile sdk information for the given mobile sdk type without authentication.
     * @summary Get a list of mobile sdk by mobile sdk type.
     * @param type Type for this mobile sdk
     */
    MobileSdkApi.prototype.getMobileSdkByType_2 = function (type) {
        var localVarPath = this.basePath + '/mobile_sdk/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getMobileSdkByType_2.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * NOTE! DEPRECATED please use GET /mobile_sdk. Get available mobile sdk information.
     * @summary Get a list of mobile sdk. NOTE! DEPRECATED
     */
    MobileSdkApi.prototype.getMobileSdkList = function () {
        var localVarPath = this.basePath + '/management/mobile_sdk';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get available mobile sdk information without authentication.
     * @summary Get a list of mobile sdk.
     */
    MobileSdkApi.prototype.getMobileSdkList_3 = function () {
        var localVarPath = this.basePath + '/mobile_sdk';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the mobile sdk object for this type and version without authentication.
     * @summary Get mobile sdk detail.
     * @param type Type of the mobile sdk
     * @param version Version of the mobile sdk
     */
    MobileSdkApi.prototype.getMobileSdk_4 = function (type, version) {
        var localVarPath = this.basePath + '/mobile_sdk/{type}/{version}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'version' + '}', encodeURIComponent(String(version)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getMobileSdk_4.');
        }
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getMobileSdk_4.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "MobileSdkDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return MobileSdkApi;
}());
exports.MobileSdkApi = MobileSdkApi;
var RoleApiApiKeys;
(function (RoleApiApiKeys) {
    RoleApiApiKeys[RoleApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(RoleApiApiKeys = exports.RoleApiApiKeys || (exports.RoleApiApiKeys = {}));
var RoleApi = /** @class */ (function () {
    function RoleApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RoleApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoleApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RoleApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    RoleApi.prototype.setApiKey = function (key, value) {
        this.authentications[RoleApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(RoleApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoleApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoleApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get a list of roles
     * @summary Get a list of roles
     */
    RoleApi.prototype.getRoles = function () {
        var localVarPath = this.basePath + '/management/roles';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Roles");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RoleApi;
}());
exports.RoleApi = RoleApi;
var SystemApiApiKeys;
(function (SystemApiApiKeys) {
    SystemApiApiKeys[SystemApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(SystemApiApiKeys = exports.SystemApiApiKeys || (exports.SystemApiApiKeys = {}));
var SystemApi = /** @class */ (function () {
    function SystemApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SystemApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SystemApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SystemApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SystemApi.prototype.setApiKey = function (key, value) {
        this.authentications[SystemApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(SystemApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SystemApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SystemApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the system information, without authentication.
     * @summary Return the system information
     */
    SystemApi.prototype.getSystemInformation = function () {
        var localVarPath = this.basePath + '/system/info';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SystemInformationResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SystemApi;
}());
exports.SystemApi = SystemApi;
var TestingApiApiKeys;
(function (TestingApiApiKeys) {
    TestingApiApiKeys[TestingApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(TestingApiApiKeys = exports.TestingApiApiKeys || (exports.TestingApiApiKeys = {}));
var TestingApi = /** @class */ (function () {
    function TestingApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TestingApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestingApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    TestingApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TestingApi.prototype.setApiKey = function (key, value) {
        this.authentications[TestingApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(TestingApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestingApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestingApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the binding information of the given device. The associations to account and application are removed; licenses and vehicle assignments are deleted.
     * @summary Reset device binding
     * @param resetDeviceBindingRequest Device unique serial number
     */
    TestingApi.prototype.testingResetDeviceBinding = function (resetDeviceBindingRequest) {
        var localVarPath = this.basePath + '/testing/reset_device_binding';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'resetDeviceBindingRequest' is not null or undefined
        if (resetDeviceBindingRequest === null || resetDeviceBindingRequest === undefined) {
            throw new Error('Required parameter resetDeviceBindingRequest was null or undefined when calling testingResetDeviceBinding.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(resetDeviceBindingRequest, "ResetDeviceBindingRequest")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TestingApi;
}());
exports.TestingApi = TestingApi;
var UserApiApiKeys;
(function (UserApiApiKeys) {
    UserApiApiKeys[UserApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(UserApiApiKeys = exports.UserApiApiKeys || (exports.UserApiApiKeys = {}));
var UserApi = /** @class */ (function () {
    function UserApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(UserApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    UserApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    UserApi.prototype.setApiKey = function (key, value) {
        this.authentications[UserApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(UserApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Associate user with the given account ids for the given user name.
     * @summary Set user accounts
     * @param username User name of the user.
     * @param accounts A list of accounts assigned to the user
     */
    UserApi.prototype.addAccountsToUser = function (username, accounts) {
        var localVarPath = this.basePath + '/management/users/{username}/accounts'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling addAccountsToUser.');
        }
        // verify required parameter 'accounts' is not null or undefined
        if (accounts === null || accounts === undefined) {
            throw new Error('Required parameter accounts was null or undefined when calling addAccountsToUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(accounts, "Array<string>")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Sets the roles of the user account with the given user name.
     * @summary Set user roles
     * @param username User name of the user.
     * @param roles A list of roles assigned to the user
     */
    UserApi.prototype.addRolesToUser = function (username, roles) {
        var localVarPath = this.basePath + '/management/users/{username}/roles'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling addRolesToUser.');
        }
        // verify required parameter 'roles' is not null or undefined
        if (roles === null || roles === undefined) {
            throw new Error('Required parameter roles was null or undefined when calling addRolesToUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(roles, "Array<string>")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create a new user
     * @summary Create user
     * @param user User object
     */
    UserApi.prototype.addUser = function (user) {
        var localVarPath = this.basePath + '/management/users';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(user, "UserDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PasswordItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Change the old password for the given user name with the new password.
     * @summary Change user password
     * @param username User name of the user.
     * @param passwordChangeRequest Password change object
     */
    UserApi.prototype.changePassword = function (username, passwordChangeRequest) {
        var localVarPath = this.basePath + '/users/{username}/password'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling changePassword.');
        }
        // verify required parameter 'passwordChangeRequest' is not null or undefined
        if (passwordChangeRequest === null || passwordChangeRequest === undefined) {
            throw new Error('Required parameter passwordChangeRequest was null or undefined when calling changePassword.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(passwordChangeRequest, "PasswordChangeRequest")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Empty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the user
     * @summary Delete user
     * @param username User name of the user
     */
    UserApi.prototype.deleteUser = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of accounts for the current user
     * @summary Get user account list
     * @param username User name of the user.
     */
    UserApi.prototype.getAccountsForUser = function (username) {
        var localVarPath = this.basePath + '/users/{username}/accounts'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getAccountsForUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserAccountList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the user details with the given user name
     * @summary Get user
     * @param username User name the the user.
     */
    UserApi.prototype.getOwnUserDetails = function (username) {
        var localVarPath = this.basePath + '/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getOwnUserDetails.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserOwnDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get user with the given username
     * @summary Get user for the given account id and username
     * @param account Account id
     * @param username Username of the user
     */
    UserApi.prototype.getScopedUserDetail = function (account, username) {
        var localVarPath = this.basePath + '/accounts/{account}/users/{username}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedUserDetail.');
        }
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getScopedUserDetail.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountUserDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a list of users for the given account id
     * @summary Get users for the given account id
     * @param account Account id
     */
    UserApi.prototype.getScopedUsers = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/users'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedUsers.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<AccountUserListItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the user with the given user name
     * @summary Get user
     * @param username User name of the user
     */
    UserApi.prototype.getUser = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserDetailExtended");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get users
     * @summary Get a list of users
     * @param accountId Account id of the users.
     * @param query String contained in either login_name, last_name, first_name or email. The query is handled case-insensitive.
     * @param role Role assigned to the user.
     */
    UserApi.prototype.getUsers = function (accountId, query, role) {
        var localVarPath = this.basePath + '/management/users';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }
        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }
        if (role !== undefined) {
            localVarQueryParameters['role'] = ObjectSerializer.serialize(role, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<UserListItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Sets the lock state of the user account with the given user name.
     * @summary Set user lock state
     * @param username User name of the user
     * @param userLockState The lock state of the user account (true/false)
     */
    UserApi.prototype.lockUser = function (username, userLockState) {
        var localVarPath = this.basePath + '/management/users/{username}/lock'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling lockUser.');
        }
        // verify required parameter 'userLockState' is not null or undefined
        if (userLockState === null || userLockState === undefined) {
            throw new Error('Required parameter userLockState was null or undefined when calling lockUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(userLockState, "UserLockState")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Resets the password for the given user name
     * @summary Reset user password
     * @param username User name of the user
     */
    UserApi.prototype.resetPasswordForUser = function (username) {
        var localVarPath = this.basePath + '/management/users/{username}/password'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling resetPasswordForUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PasswordItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Updates the user with the given user name
     * @summary Update user
     * @param username User name of the user.
     * @param userOwnDetails User object
     */
    UserApi.prototype.updateOwnUserDetails = function (username, userOwnDetails) {
        var localVarPath = this.basePath + '/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateOwnUserDetails.');
        }
        // verify required parameter 'userOwnDetails' is not null or undefined
        if (userOwnDetails === null || userOwnDetails === undefined) {
            throw new Error('Required parameter userOwnDetails was null or undefined when calling updateOwnUserDetails.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(userOwnDetails, "UserOwnDetails")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Updates the user with the given user name
     * @summary Update user
     * @param username User name of the user
     * @param user User object
     */
    UserApi.prototype.updateUser = function (username, user) {
        var localVarPath = this.basePath + '/management/users/{username}'
            .replace('{' + 'username' + '}', encodeURIComponent(String(username)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateUser.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateUser.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(user, "UserDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return UserApi;
}());
exports.UserApi = UserApi;
var VehicleApiApiKeys;
(function (VehicleApiApiKeys) {
    VehicleApiApiKeys[VehicleApiApiKeys["JwtAuth_"] = 0] = "JwtAuth_";
})(VehicleApiApiKeys = exports.VehicleApiApiKeys || (exports.VehicleApiApiKeys = {}));
var VehicleApi = /** @class */ (function () {
    function VehicleApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'Basic': new HttpBasicAuth(),
            'JwtAuth_': new ApiKeyAuth('header', 'Authorization'),
            'OauthSecurity': new OAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VehicleApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VehicleApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    VehicleApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    VehicleApi.prototype.setApiKey = function (key, value) {
        this.authentications[VehicleApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(VehicleApi.prototype, "username", {
        set: function (username) {
            this.authentications.Basic.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VehicleApi.prototype, "password", {
        set: function (password) {
            this.authentications.Basic.password = password;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VehicleApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.OauthSecurity.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Stores the given ECUs with the vehicle that is currently bound to the given device.
     * @summary Store ECUs with vehicle
     * @param serialNumber Device unique serial number
     * @param detail ECUs
     * @param bindingReference Reference for the binding process
     */
    VehicleApi.prototype.addEcusToDevice = function (serialNumber, detail, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current/ecus'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling addEcusToDevice.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling addEcusToDevice.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "VehicleEcuList")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates a vehicle record. If the vehicle record already exists, the record is updated.
     * @summary Create vehicle
     * @param account Customer association (account id)
     * @param detail Vehicle object
     */
    VehicleApi.prototype.createScopedVehicle = function (account, detail) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling createScopedVehicle.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling createScopedVehicle.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "VehicleDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Creates a vehicle record, assigns it to the device with the given unique serial number. If the vehicle record already exists, the record is updated.
     * @summary Create or update vehicle and assign it to device
     * @param serialNumber Device unique serial number
     * @param detail Vehicle object
     * @param bindingReference Reference for the binding process
     */
    VehicleApi.prototype.createVehicleForDevice = function (serialNumber, detail, bindingReference) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling createVehicleForDevice.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling createVehicleForDevice.');
        }
        if (bindingReference !== undefined) {
            localVarQueryParameters['binding_reference'] = ObjectSerializer.serialize(bindingReference, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "VehicleDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Deletes the vehicle with the given VIN.
     * @summary Delete vehicle
     * @param account Customer association (account id)
     * @param vin Unique VIN of the vehicle
     */
    VehicleApi.prototype.deleteScopedVehicle = function (account, vin) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling deleteScopedVehicle.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling deleteScopedVehicle.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of valid countries as ISO-3166 codes
     * @summary Get valid country codes
     */
    VehicleApi.prototype.getCountryCodes = function () {
        var localVarPath = this.basePath + '/countries';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<CountryCode>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the currently active license policy for the given device
     * @summary Get currently active license policy of the device.
     * @param serialNumber Device unique serial number
     */
    VehicleApi.prototype.getCurrentDeviceLicensePolicy = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/policy'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getCurrentDeviceLicensePolicy.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LicensePolicyItem");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get an array of vehicles which were at least once assigned to the device with the given unique serial number
     * @summary Get vehicle assignment history for the device.
     * @param serialNumber Device unique serial number
     */
    VehicleApi.prototype.getDeviceVehicleAssignmentHistory = function (serialNumber) {
        var localVarPath = this.basePath + '/management/devices/{serial_number}/vehicle_assignment_history'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getDeviceVehicleAssignmentHistory.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeviceVehicleAssignmentHistory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the devices associated to the given vehicle VIN
     * @summary Get devices associated to vehicle
     * @param account Account id
     * @param vin Unique VIN of the vehicle
     */
    VehicleApi.prototype.getDevicesByVehicle = function (account, vin) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}/devices'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getDevicesByVehicle.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getDevicesByVehicle.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<Device>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all ECUs for the vehicle that is currently bound to the given device.
     * @summary Get a list of ECUs of vehicle by device
     * @param serialNumber Device unique serial number
     */
    VehicleApi.prototype.getEcusForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current/ecus'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getEcusForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VehicleEcuList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the vehicle record with the given VIN.
     * @summary Get vehicle
     * @param account Customer association (account id)
     * @param vin Unique VIN of the vehicle
     */
    VehicleApi.prototype.getScopedVehicle = function (account, vin) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedVehicle.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getScopedVehicle.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VehicleDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all vehicles assigned to the given account id
     * @summary Get a list of vehicles by account
     * @param account Customer association (account id)
     */
    VehicleApi.prototype.getScopedVehiclesByAccount = function (account) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling getScopedVehiclesByAccount.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VehicleList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the record of the vehicle that is currently bound to the given device unique serial number
     * @summary Get vehicle for device
     * @param serialNumber Device unique serial number
     */
    VehicleApi.prototype.getVehicleForDevice = function (serialNumber) {
        var localVarPath = this.basePath + '/devices/{serial_number}/vehicles/current'
            .replace('{' + 'serial_number' + '}', encodeURIComponent(String(serialNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'serialNumber' is not null or undefined
        if (serialNumber === null || serialNumber === undefined) {
            throw new Error('Required parameter serialNumber was null or undefined when calling getVehicleForDevice.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VehicleDetail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Updates the given vehicle record.
     * @summary Update vehicle
     * @param account Customer association (account id)
     * @param vin Unique VIN of the vehicle
     * @param detail Vehicle object
     */
    VehicleApi.prototype.updateScopedVehicle = function (account, vin, detail) {
        var localVarPath = this.basePath + '/accounts/{account}/vehicles/{vin}'
            .replace('{' + 'account' + '}', encodeURIComponent(String(account)))
            .replace('{' + 'vin' + '}', encodeURIComponent(String(vin)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling updateScopedVehicle.');
        }
        // verify required parameter 'vin' is not null or undefined
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling updateScopedVehicle.');
        }
        // verify required parameter 'detail' is not null or undefined
        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling updateScopedVehicle.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(detail, "VehicleDetail")
        };
        this.authentications.JwtAuth_.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return VehicleApi;
}());
exports.VehicleApi = VehicleApi;
//# sourceMappingURL=api.js.map